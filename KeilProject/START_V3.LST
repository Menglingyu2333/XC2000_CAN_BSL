A166 MACRO ASSEMBLER  START_V3                                                            08/07/2019 16:02:47 PAGE     1


MACRO ASSEMBLER A166 V5.36.0.1
OBJECT MODULE PLACED IN START_V3.OBJ
ASSEMBLER INVOKED BY: D:\Keil_C166\C166\BIN\A166.EXE START_V3.A66 MODV2 SEGMENTED MODV2 SET(SMALL) DEBUG EP

LOC      OBJ             LINE     SOURCE

                            1     $MODV2                                  ; Define C166v2 core mode
                            2     ;
                            3     ;------------------------------------------------------------------------------
                            4     ;  This file is part of the C166 Compiler package
                            5     ;  Copyright KEIL ELEKTRONIK GmbH 1993 - 2014
                            6     ;  Version 5.10
                            7     ;  *** <<< Use Configuration Wizard in Context Menu >>> ***
                            8     ;
                            9     ;------------------------------------------------------------------------------
                           10     ;  START_V3.A66:  This code is executed after processor reset and provides the
                           11     ;                 startup sequence for the Infineon XC2xxx and XE16x devices.
                           12     ;
                           13     ;  You may add this file to a uVision3 project - in this case it will be 
                           14     ;  automatically assembled and linked.
                           15     ;
                           16     ;  For manual translation of this file use A166 with the following invocation:
                           17     ;
                           18     ;     A166 START_V3.A66 SET (model)
                           19     ;
                           20     ;     model determines the memory model and can be one of the following:
                           21     ;         TINY, SMALL, COMPACT, HCOMPACT, MEDIUM, LARGE, HLARGE, XLARGE
                           22     ;
                           23     ;  Example:  A166 START_V2.A66 SET (SMALL)
                           24     ;
                           25     ;  For manual linkage of the modified START_V3.OBJ file to your application
                           26     ;  use the following L166 invocation:
                           27     ;
                           28     ;     L166 your object file list, START_V3.OBJ controls
                           29     ;
                           30     ;------------------------------------------------------------------------------
                           31     ; Setup model-dependend Assembler controls
                           32     $CASE
                           33     $IF NOT TINY
                           34     $SEGMENTED
                           35     $ENDIF
                           36     
                           37     ; Settings for ADDRSEL calculation (do not change!)
 0400                      38     KB          EQU    0x400     ; define KB constant for CS _SIZE calculation
 00100000                  39     MB          EQU    0x400*KB  ; define MB as 1024KB
                           40     ;------------------------------------------------------------------------------
                           41     ;
                           42     ; <h>Definitions for System and User Stack
                           43     ; ========================================
                           44     ;
                           45     ; <o>STKSZ: Maximum System Stack Size selection <0x0-0x1000:0x2>
                           46     ; <i> Defines the system stack space that is used by CALL/RET and PUSH/POP
                           47     ; <i> instructions.  The system stack space must be adjusted according the actual
                           48     ; <i> requirements of the application.
 0200                      49     SSTSZ   EQU     0x200 
                           50     ; <o> USTSZ: User Stack Size Definition <0x0-0x4000:0x2>
                           51     ; <i> Defines the user stack space available for automatics.  This stack space is
                           52     ; <i> accessed by R0.  The user stack space must be adjusted according the actual
                           53     ; <i> requirements of the application.
 0200                      54     USTSZ   EQU     0x200    ; set User Stack Size to 200H Bytes.
                           55     ;
                           56     ; <o> UST1SZ: User Stack Size for local register bank 1 <0x0-0x4000:0x2>
                           57     ; <i> Defines the user stack space available for the interrupt functions that are
                           58     ; <i> assigned to the local register bank 1.  Since the compiler cannot copy the R0
A166 MACRO ASSEMBLER  START_V3                                                            08/07/2019 16:02:47 PAGE     2

                           59     ; <i> value to local register banks, the user stack must be assign separately.
                           60     ; <i> If you have no interrupt functions assigned to local register bank 1, you may
                           61     ; <i> set UST1SZ to 0.
 0020                      62     UST1SZ   EQU    0x20     ; set User Stack Size to 20H Bytes.
                           63     ;
                           64     ; <o> UST2SZ: User Stack Size for local register bank 2 <0x0-0x4000:0x2>
                           65     ; <i> Defines the user stack space available for the interrupt functions that are
                           66     ; <i> assigned to the local register bank 1.  Since the compiler cannot copy the R0
                           67     ; <i> value to local register banks, the user stack must be assign separately.
                           68     ;  If you have no interrupt functions assigned to local register bank 2, you may
                           69     ;  set UST2SZ to 0.
 0020                      70     UST2SZ   EQU    0x20     ; set User Stack Size to 20H Bytes.
                           71     ;
                           72     ; </h>
                           73     ; <h>Definitions for Startup Code
                           74     ; ===============================
                           75     ;
                           76     ; <q> CLR_MEMORY: Enable/Disable Memory Zero Initialization of RAM area
                           77     ; --- <i> Set CLR_MEMORY = 0 to disable memory zero initialization
                           78     $SET (CLR_MEMORY = 1)
                           79     ;
                           80     ; <q> INIT_VARS: Enable/Disable Variable Initialization
                           81     ; --- <i> Set INIT_VARS = 0 to disable variable initialization
                           82     $SET (INIT_VARS = 1)
                           83     ;
                           84     ; <q> DPPUSE:  Allow re-assign of DPP registers 
                           85     ; --- <i> Set DPPUSE = 0 to reduce the code size of the startup code, if you
                           86     ;     <i> are not using the L166 DPPUSE directive.
                           87     $SET (DPPUSE = 1)
                           88     ;
                           89     ; <q> DPP3USE: Use DPP3 register during variable initialization
                           90     ; --- <i> Set DPP3USE = 0 to disable the usage of DPP3 during initialization of
                           91     ;     <i> variables.  This option might be required if you write
                           92     ;     <i> program parts that are reloaded during application 
                           93     ;     <i> execution and increase code size of the startup code.
                           94     $SET (DPP3USE = 1)
                           95     ;
                           96     ;</h>
                           97     ; <h> CPU Configuration
                           98     ; =====================
                           99     ;
                          100     ; <e> Definitions for CPU Configuration Register CPUCON1
                          101     ; ======================================================
                          102     ;
                          103     ;  INIT_CPUCON1: Init CPUCON1 register
                          104     ; --- <i>Set INIT_CPUCON1 = 1 to initialize the CPUCON1 register
                          105     $SET (INIT_CPUCON1 = 0) ; default: do not initialize CPUCON1  
                          106     ;
                          107     ; <q> ZCJ: Enable Zero Cycle Jump Function (CPUCON1.0):
 0001                     108     _ZCJ     EQU    1       ; 0 = Disable Zero Cycle Jump Function
                          109                             ; 1 = Enable Zero Cycle Jump Function
                          110     ;
                          111     ; <q> BP: Enable Branch Prediction Unit (CPUCON1.1):
 0001                     112     _BP      EQU    1       ; 0 = Disable Branch Prediction Unit
                          113                             ; 1 = Enable Branch Prediction Unit
                          114     ;
                          115     ; <q> INTSCXT: Enable Interruptability of Switch Context Instruction (CPUCON1.2):
 0001                     116     _INTSCXT EQU    1       ; 0 = Disable Interruption of SCXT instruction
                          117                             ; 1 = Enable Interruption of SCXT instruction
                          118     ;
                          119     ; SGTDIS: Disable Segmentation Control (CPUCON1.3):
                                  $IF TINY
                                  _SGTDIS  EQU    1       ; disable segmented mode for TINY model
                          122     $ELSE
 0000                     123     _SGTDIS  EQU    0       ; enable segmented mode (Reset Value)
                          124     $ENDIF
A166 MACRO ASSEMBLER  START_V3                                                            08/07/2019 16:02:47 PAGE     3

                          125     ;
                          126     ; <o> WDTCTL: Watchdog Timer Control (CPUCON1.4):
                          127     ; <0=> DISWDT executable until end of EINIT  <1=> DISWDT/ENWDT always executable
 0000                     128     _WDTCTL  EQU    0       ; 0 = DISWDT executable until end of EINIT
                          129                             ; 1 = DISWDT/ENWDT always executable
                          130     ;
                          131     ; <o> VECSC: Vector Table Scaling Factor (CPUCON1.5 .. CPUCON1.6)
                          132     ; <0=> 2 words  <1=> 4 words  <2=> 8 words  <3=> 16 words
 0000                     133     _VECSC   EQU    0       ; 0 = Space between two vectors is 2 words
                          134                             ; 1 = Space between two vectors is 4 words
                          135                             ; 2 = Space between two vectors is 8 words
                          136                             ; 3 = Space between two vectors is 16 words
                          137     ;
                          138     ; </e>
                          139     ;
                          140     ; <e> Definitions for CPU Configuration Register CPUCON2
                          141     ; ======================================================
                          142     ;
                          143     ;  INIT_CPUCON2: Init CPUCON2 register
                          144     ; --- <i>Set INIT_CPUCON2 = 1 to initialize the CPUCON2 register
                          145     $SET (INIT_CPUCON2 = 0) ; default: do not initialize CPUCON2  
                          146     ;
                          147     ; <q> SL: Enable Short Loop Mode (CPUCON2.0)
 0001                     148     _SL       EQU   1       ; 0 = Short Loop mode disabled
                          149                             ; 1 = Short Loop mode enabled
                          150     ;
                          151     ; <q> DAID: Disable Atomic Injection Deny (CPUCON2.1)
 0001                     152     _DAID  EQU   1          ; 0 = Injection-requests are denied during Atomic 
                          153                             ; 1 = Injection-requests are not denied during Atomic 
                          154     ;
                          155     ; <q> RETST: Enable Return Stack (CPUCON2.3)
 0001                     156     _RETST    EQU   1       ; 0 = Return Stack disabled
                          157                             ; 1 = Return Stack enabled
                          158     ;
                          159     ; <q> OVRUN: Allow Pipeline Bubble Overrun (CPUCON2.4)
 0001                     160     _OVRUN    EQU   1       ; 0 = Overrun of Pipeline Bubbles not allowed
                          161                             ; 1 = Overrun of Pipeline Bubbles allowed
                          162     ;
                          163     ; <q> LFIC: Linear Follower Instruction Cache (CPUCON2.5)
 0001                     164     _LFIC     EQU   1       ; 0 = Zero Cycle Jump Cache disabled
                          165                             ; 1 = Zero Cycle Jump Cache enabled
                          166     ;
                          167     ; <q> STEN: Enable Stall Instruction (CPUCON2.6)
 0000                     168     _STEN     EQU   0       ; 0 = Stall instruction disabled
                          169                             ; 1 = Stall instruction enabled
                          170     ;
                          171     ; <q> EIOIAEN: Early IO Injection Acknowledge guaranteed (CPUCON2.7)
 0001                     172     _EIOIAEN  EQU   1       ; 0 = Injection ack. by destructive read not guaranteed
                          173     ;                       ; 1 = Injection ack. by destructive read guaranteed
                          174     ; 
                          175     ; <q> BYPF: Enable Fetch Bypass Control (CPUCON2.8)
 0001                     176     _BYPF     EQU   1       ; 0 = Bypass Path from Fetch to Decode disabled
                          177                             ; 1 = Bypass Path from Fetch to Decode enabled
                          178     ;
                          179     ; <q> BYPPF: Enable Prefecth Bypass Control (CPUCON2.9)
 0001                     180     _BYPPF    EQU   1       ; 0 = Bypass Path from Prefetch to Decode disabled
                          181                             ; 1 = Bypass Path from Prefetch to Decode enabled
                          182     ;
                          183     ; <o> FIFOFED: FIFO Fill Configuration (CPUCON2.10 .. CPUCON2.11)
                          184     ; <0=> FIFO disabled    <1=> 1 instruction
                          185     ; <2=> 2 instructions   <3=> 3 instructions
 0003                     186     _FIFOFED  EQU   3       ; 0 = FIFO disabled
                          187                             ; 1 = FIFO filled with up to 1 instruction per cycle
                          188                             ; 2 = FIFO filled with up to 2 instructions per cycle
                          189                             ; 3 = FIFO filled with up to 3 instructions per cycle
                          190     ;
A166 MACRO ASSEMBLER  START_V3                                                            08/07/2019 16:02:47 PAGE     4

                          191     ;<o> FIFODEPTH: FIFO Depth Configuration (CPUCON2.12 .. CPUCON2.15) <0-8>
 0008                     192     _FIFODEPTH EQU  8       ; 0 = No FIFO entries (No FIFO)
                          193                             ; 1 = 1 FIFO entry
                          194                             ; ...
                          195                             ; 8 = 8 FIFO entries
                          196                             ; 9 - 15 = reserved
                          197     ;</e>
                          198     
                          199     ; <e> Internal Memory Block Control
                          200     ; =================================
                          201     ;
                          202     ;  INIT_IMBCTR: Init IMBCTR register
                          203     ; --- <i>Set INIT_IMBCTR = 1 to initialize the IMBCTRL/H register
                          204     $SET (INIT_IMBCTR = 0)  ; default: do not initialize IMBCTR  
                          205     ;
                          206     ; <h> Definitions for Internal Memory Block Control Register IMBCTRL
                          207     ; ==================================================================
                          208     ;
                          209     ; <o> WSFLASH: Wait States for the Flash Memory (IMBCTRL.0 .. IMBCTRL.2)<1-7>
                          210     ; <i> this value also specifies the read time of the PSRAM in the flash emulation addr
                                  ess range
 0004                     211     _WSFLASH  EQU   4       ; 0 = No waitstates (forbidden!)
                          212                             ; 1-7 = One to seven waitstate
                          213     ;
                          214     ; <q> DLCPF: Disable Linear Code Pre-Fetch (IMBCTRL.3)
                          215     ; <0=> High Speed Mode
                          216     ; <1=> Low Power Mode
 0001                     217     _DLCPF    EQU   1       ; 0 = High Speed Mode
                          218                             ; 1 = Low Power Mode
                          219     ;
                          220     ; <o> DCF: Disable Code Fetch from Flash Memory (IMBCTRL.12 .. IMBCTRL.13)
                          221     ; <i> values 0 and 3 are not allowed
                          222     ; <1=> no instruction fetch if RPA 1
                          223     ; <2=> instructions can always be fetched
 0001                     224     _DCF      EQU   1       ; 0 = Illegal state
                          225                             ; 1 = no instruction fetch if RPA=1
                          226                             ; 2 = instructions can always be fetched
                          227                             ; 3 = Illegal state
                          228     ;
                          229     ; <o> DDF: Disable Data Fetch from Flash Memory (IMBCTRL.14 .. IMBCTRL.15)
                          230     ; <i> values 0 and 3 are not allowed
                          231     ; <1=> no data read if RPA=1
                          232     ; <2=> data can always be read
 0001                     233     _DDF      EQU   1       ; 0 = Illegal state
                          234                             ; 1 = no data read if RPA=1
                          235                             ; 2 = data can always be read
                          236                             ; 3 = Illegal state
                          237     ;
                          238     ;</h>
                          239     
                          240     ; <h> Definitions for Internal Memory Block Control Register IMBCTRH
                          241     ; ==================================================================
                          242     ;
                          243     ; <o> PSPROT: PSRAM Write Protection (IMBCTRH.8 .. IMBCTRH.15)<0-255>
                          244     ; <i> The start address of the writable range is E00000H + 1000H*PSPROT
 0000                     245     _PSPROT   EQU   0       ; 0  = Complete PSRAM is writable
                          246                             ; ...
                          247                             ; 16 or bigger = PSRAM is write protected
                          248     ;</h>
                          249     ;</e>
                          250     ;
                          251     ;</h>
                          252     ;
                          253     ; <h> Oscillator Control
                          254     ; ======================
                          255     ;
A166 MACRO ASSEMBLER  START_V3                                                            08/07/2019 16:02:47 PAGE     5

                          256     ; <e> Definitions for Wake-up Clock Register WUOSCCON
                          257     ; ===================================================
                          258     ;
                          259     ; INIT_WUOSCCON: Init WUOSCCON register
                          260     ; --- Set INIT_WUOSCCON = 1 to initialize the WUOSCCON register
                          261     $SET (INIT_WUOSCCON = 0)
                          262     ;
                          263     ; <o> FREQSEL: System Clock Select (WUOSCCON.0 .. WUOSCCON.1)
                          264     ; <0=> 500kHz   <1=> 300 kHz
                          265     ; <2=> 200kHz   <3=> 130 kHz
 0000                     266     _FREQSEL  EQU    0      ; 0 = 500 kHz
                          267                             ; 1 = 300 kHz
                          268                             ; 2 = 200 kHz
                          269                             ; 3 = 130 kHz
                          270     ;
                          271     ; <o> PWSEL: Power Consumption Selection (WUOSCCON.2 .. WUOSCCON.3)
                          272     ; <0=> not specified <1=> not specified
                          273     ; <2=> not specified <3=> not specified
 0000                     274     _PWSEL    EQU    0      ; 0 = not specified
                          275                             ; 1 = not specified
                          276                             ; 2 = not specified
                          277                             ; 3 = not specified
                          278     ;
                          279     ; <q> DIS: Clock Disable (WUOSCCON.4)
                          280     ; <i> enables the automatic asyncronous switch to the emergency clock 
                          281     ; <i> in case of an OSCWDT or VCOLCK emergency event
 0000                     282     _DIS      EQU    0      ; 0 = Clock is enabled
                          283                             ; 1 = Clock is disabled
                          284     ;
                          285     ; </e>
                          286     ;
                          287     ;  <e> Definitions for High Precision Oscillator Register HPOSCCON
                          288     ; ================================================================
                          289     ;
                          290     ; INIT_HPOSCCON: Init HPOSCCON register
                          291     ; --- Set INIT_HPOSCCON = 1 to initialize the HPOSCCON register
                          292     $SET (INIT_HPOSCCON = 1)
                          293     ;
                          294     ; <q> OSCWDTRST: Oscillator Watchdog Reset (HPOSCCON.1)
                          295     ; <i> specifies if the oscillator watchdog will be reset 
 0000                     296     _OSCWDTRST EQU   0      ; 0 = The oscillator watchdog of the PLL is not reset and rema
                                  ins active
                          297                             ; 1 = The oscillator watchdog of the PLL is reset and restarte
                                  d
                          298     ;
                          299     ; <o> MODE: Oscillator Mode (HPOSCCON.2 .. HPOSCCON.3)
                          300     ; <0=>External Crystal Mode. Power-Saving Mode is not entered     <1=>OSC_HP disabled.
                                   Power-Saving Mode is not entered
                          301     ; <2=>External Input Clock Mode. Power-Saving Mode is not entered <3=>OSC_HP disabled.
                                   Power-Saving Mode is entered
 0000                     302     _MODE     EQU    0      ; 0 = External Crystal Mode. Power-Saving Mode is not entered
                          303                             ; 1 = OSC_HP disabled. Power-Saving Mode is not entered
                          304                             ; 2 = External Input Clock Mode. Power-Saving Mode is not ente
                                  red
                          305                             ; 3 = OSC_HP disabled. Power-Saving Mode is entered (default)
                          306     ;
                          307     ; <q> X1DEN: XTAL1 Data Enable (HPOSCCON.7)
                          308     ; <i> specifies if X1D reflects the inverted level of XTAL1 
 0000                     309     _X1DEN    EQU    0      ; 0 = Bit X1D is not updated
                          310                             ; 1 = Bit X1D reflects the inverted level of XTAL1
                          311     ;
                          312     ; <q> SHBY: Shaper Bypass (HPOSCCON.8)
                          313     ; <i> Switch shaper or/off
 0000                     314     _SHBY     EQU    0      ; 0 = The shaper is not bypassed
                          315                             ; 1 = The shaper is bypassed
                          316     ;
A166 MACRO ASSEMBLER  START_V3                                                            08/07/2019 16:02:47 PAGE     6

                          317     ; <q> EMCLKEN: OSCWDT Emergency System Clock Source Select Enable (HPOSCCON.9)
                          318     ; <i> Clock selection in case of an OSCWDT emergency
 0000                     319     _HP_EMCLKEN EQU  0      ; 0 = MCM controlled by SYSCON0.CLKSEL
                          320                             ; 1 = MCM controlled by SYSCON0.EMCLKSEL
                          321     ;
                          322     ; <q> EMFINDISEN: Emergency Input Clock Disconnect Enable (HPOSCCON.10)
                          323     ; <i> defines whether bit PLLSTAT.FINDIS is set in an emergency
 0000                     324     _HP_EMFINDISEN EQU 0    ; 0 = No update of PLLSTAT.FINDIS
                          325                             ; 1 = PLLSTAT.FINDIS is set in an OSCWDT emergency case
                          326     ;
                          327     ; </e>
                          328     ;
                          329     ;  <e> Definitions for Trimmed Current Controlled Clock Control Register PLLOSCCON
                          330     ; ================================================================================
                          331     ;
                          332     ; INIT_PLLOSCCON: Init PLLOSCCON register
                          333     ; --- Set INIT_PLLOSCCON = 1 to initialize the PLLOSCCON register
                          334     $SET (INIT_PLLOSCCON = 0)
                          335     ;
                          336     ; <q> OSCPD: Clock Source Power Saving Mode (PLLOSCCON.0)
                          337     ; <i> Set this bit to 1 to switch-off the trimmed current controlled clock source
 0000                     338     _OSCPD    EQU    0      ; 0 = Trimmed current controlled clock source is active
                          339                             ; 1 = Trimmed current controlled clock source is off
                          340     ;
                          341     ; </e>
                          342     ; </h>
                          343     ;
                          344     ; <e> PLL Control
                          345     ; ===============
                          346     ;
                          347     ; INIT_PLLCON: Init PLLCON register
                          348     ; --- Set INIT_PLLCON = 1 to initialize all the PLLCONx register
                          349     $SET (INIT_PLLCON = 1)
                          350     ;
                          351     ;  <h> Definitions for PLL Clock Register PLLCON0
                          352     ; ===============================================
                          353     ;
                          354     ; <o> VCOBY: VCO Bypass (PLLCON0.0)
                          355     ; <i> specifies if VCO is bypassed or not
                          356     ; <0=> Normal operation, VCO is not bypassed
                          357     ; <1=> Prescaler Mode. VCO is bypassed
 0000                     358     _VCOBY    EQU    0      ; 0 = Normal operation, VCO is not bypassed
                          359                             ; 1 = Prescaler Mode. VCO is bypassed
                          360     ;
                          361     ; <q> VCOPWD: VCO Power Saving Mode (PLLCON0.1)
                          362     ; <i> disables VCO
 0000                     363     _VCOPWD   EQU    0      ; 0 = VCO is active
                          364                             ; 1 = VCO is inactive in power saving mode
                          365     ;
                          366     ; <o> VCOSEL: VCO Range Select (PLLCON0.2 .. PLLCON0.3)
                          367     ; <0=> 48...112 MHz (Values may vary. See datasheet)
                          368     ; <1=> 96...160 MHz (Values may vary. See datasheet)
                          369     ; <2=> 192...340 MHz (not available on all devices. See datasheet)
                          370     ; <3=> Reserved, do not use
                          371     ; <i> VCOSEL VCO Range Select
 0001                     372     _VCOSEL   EQU    1      ; 0 =  48...112 MHz (depending on device)
                          373                             ; 1 =  96...160 MHz (depending on device)
                          374                             ; 2 = 192...340 MHz (n/a on all devices)
                          375                             ; 3 = reserved
                          376     ;
                          377     ; <o> REGENCLR: Power Regulator Enable Clear (PLLCON0.4)
                          378     ; <0=> No action
                          379     ; <1=> Switch off the PLL's power regulator
                          380     ; <i> REGENCLR Power Regulator Enable Clear
 0000                     381     _REGENCLR EQU    0      ; 0 = no action
                          382                             ; 1 = switch off the PLL's power regulator
A166 MACRO ASSEMBLER  START_V3                                                            08/07/2019 16:02:47 PAGE     7

                          383     ;
                          384     ; <o> REGENSET: Power Regulator Enable Set (PLLCON0.5)
                          385     ; <0=> No action
                          386     ; <1=> Switch on the PLL's power regulator
                          387     ; <i> REGENSET Power Regulator Enable Set
 0000                     388     _REGENSET EQU    0      ; 0 = no action
                          389                             ; 1 = switch on the PLL's power regulator
                          390     ;
                          391     ; <o> INSEL: PLL Input Select (PLLCON0.6 .. PLLCON0.7)
                          392     ; <0=> fosc is selected
                          393     ; <1=> fclkin1 is selected
                          394     ; <2=> Reserved, do not use
                          395     ; <3=> Reserved, do not use
                          396     ; <i> INSEL PLL Input Select (n/a on all devices)
 0000                     397     _INSEL    EQU    0      ; 0 = no action
                          398                             ; 1 = switch on the PLL's power regulator
                          399     ;
                          400     ; <o> NDIV: N-Divider Value (PLLCON0.8 .. PLLCON0.13) <8-50>
                          401     ; <i> The resulting factor N for the N-Divider is (NDIV+1)
                          402     ; <i> Check the datasheet of your device for allowed values
 0013                     403     _NDIV     EQU    19
                          404     ;
                          405     ; </h>
                          406     ;
                          407     ;  <h> Definitions for PLL Clock Register PLLCON1
                          408     ; ===============================================
                          409     ;
                          410     ; <q> PLLPWD: Power Saving Mode (PLLCON1.0)
                          411     ; <i> disables PLL in power saving mode
 0000                     412     _PLLPWD   EQU    0      ; 0 = Normal Mode
                          413                             ; 1 = Complete PLL block is inactive in power saving mode
                          414     ;
                          415     ; <o> OSCSEL: Clock Input Selection (PLLCON1.1)
                          416     ; <i> selects PLL input clock
                          417     ; <0=> external oscillator (OSC_HP)
                          418     ; <1=> internal oscillator (IOSC)
 0000                     419     _OSCSEL   EQU    0      ; 0 = PLL input clock is OSC_HP output
                          420                             ; 1 = PLL input clock is IOSC output
                          421     ;
                          422     ; <q> AOSCSEL: Asyncronous Clock Input Selection (PLLCON1.3)
                          423     ; <i> 
 0000                     424     _AOSCSEL  EQU    0      ; 0 = Configuration is controlled via bis OSCSEL
                          425                             ; 1 = PLL internal clock IOSC is selected asyncronously
                          426     ;
                          427     ; <q> EMCLKEN: VCOLCK Emergency System Clock Source Select Enable (PLLCON1.5)
                          428     ; <i> Master clock selection in case of emergency
 0000                     429     _PLL_EMCLKEN EQU 0      ; 0 = MCM controlled by SZSCON0.CLKSEL
                          430                             ; 1 = MCM controlled by SZSCON0.EMCLKSEL in a VCOLCK emergency
                                   case
                          431     ;
                          432     ; <q> EMFINDISEN: Emergency Input Clock Disconnect Enable (PLLCON1.6)
                          433     ; <i> specifies if PLLSTAT.FINDIS is set in a VCOLCK emergency case
 0000                     434     _PLL_EMFINDISEN EQU 0   ; 0 = No update of PLLSTAT.FINDIS
                          435                             ; 1 = PLLSTAT.FINDIS is set in a VCOLCK emergency case
                          436     ;
                          437     ; <o> PDIV: P-Divider Value (PLLCON1.8 .. PLLCON1.11) <0-15>
                          438     ; <i> The resulting factor P for the P-Divider is (PDIV+1)
 0000                     439     _PDIV     EQU    0
                          440     ;
                          441     ; </h>
                          442     ;
                          443     ;  <h> Definitions for PLL Clock Register PLLCON2
                          444     ; ===============================================
                          445     ;
                          446     ; <o> K1DIV: K1-Divider Value (PLLCON2.0 .. PLLCON2.9) <0-1023>
                          447     ; <i> The resulting factor K1 for the K1-Divider is (K1DIV+1)
A166 MACRO ASSEMBLER  START_V3                                                            08/07/2019 16:02:47 PAGE     8

 0001                     448     _K1DIV    EQU    1
                          449     ;
                          450     ; </h>
                          451     ;
                          452     ;  <h> Definitions for PLL Clock Register PLLCON3
                          453     ; ===============================================
                          454     ;
                          455     ; <o> K2DIV: K2-Divider Value (PLLCON3.0 .. PLLCON3.9) <0-1023>
                          456     ; <i> The resulting factor K2 for the K2-Divider is (K2DIV+1)
 0001                     457     _K2DIV    EQU    1
                          458     ;
                          459     ; </h>
                          460     ; </e>
                          461     ;
                          462     ; <h> System Contol
                          463     ; =================
                          464     ;
                          465     ; <e> Definitions for System Configuration Register SYSCON0
                          466     ; =========================================================
                          467     ;
                          468     ; INIT_SYSCON0: Init SYSCON0 register
                          469     ; --- Set INIT_SYSCON0 = 1 to initialize the SYSCON0 register
                          470     $SET (INIT_SYSCON0 = 0)
                          471     ;
                          472     ; <o> CLKSEL: System Clock Select (SYSCON0.0 .. SYSCON0.1)
                          473     ; <0=> WUT clock output <1=> OSC_HP output
                          474     ; <2=> PLL clock output <3=> DIRIN clock input
 0002                     475     _CLKSEL   EQU    2      ; 0 = WUT clock output
                          476                             ; 1 = OSC_HP output
                          477                             ; 2 = PLL clock output
                          478                             ; 3 = Direct Input clock DIRIN
                          479     ;
                          480     ; <o> EMCLKSEL: Emergency Clock Select (SYSCON0.3 .. SYSCON0.4)
                          481     ; <0=> WUT clock output <1=> OSC_HP output
                          482     ; <2=> PLL clock output <3=> DIRIN clock input
 0000                     483     _EMCLKSEL EQU    0      ; 0 = WUT clock output
                          484                             ; 1 = OSC_HP output
                          485                             ; 2 = PLL clock output
                          486                             ; 3 = Direct Input clock DIRIN
                          487     ;
                          488     ; <q> EMCLKSELEN: Emergency Clock Select Enable (SYSCON0.6)
                          489     ; <i> enables the automatic asyncronous switch to the emergency clock 
                          490     ; <i> in case of an OSCWDT or VCOLCK emergency event
 0000                     491     _EMCLKSELEN EQU  0      ; 0 = Emergency clock switch is disabled
                          492                             ; 1 = Emergency clock switch is enabled
                          493     ;
                          494     ; </e>
                          495     ;</h>
                          496     ;
                          497     ;
                          498     ; <e> Definitions for External Service Request (ESR) Pins
                          499     ; =======================================================
                          500     ;
                          501     ; INIT_ESRCFG: Init ESRCFG0/1/2 register
                          502     ; --- Set INIT_ESRCFG = 1 to initilize the ESRCFG0/1/2 register
                          503     $SET (INIT_ESRCFG = 0)
                          504     ;
                          505     ; <o> ESR 0: Pin Control(ESRCFG.PC)
                          506     ; <0=> No pull device activated. Input is not inverted
                          507     ; <1=> Pull-down device activated. Input is not inverted
                          508     ; <2=> Pull-up device activated. Input is not inverted
                          509     ; <3=> No pull device activated. Input is not inverted
                          510     ; <4=> No pull device activated. Input is inverted
                          511     ; <5=> Pull-down device activated. Input is inverted
                          512     ; <6=> Pull-up device activated. Input is inverted
                          513     ; <7=> No pull device activated. Input is inverted
A166 MACRO ASSEMBLER  START_V3                                                            08/07/2019 16:02:47 PAGE     9

                          514     ; <8=> Output of ESRCFGx.OUT. Push-pull
                          515     ; <9=> Output of ESRCFGx.OUT. Push-pull
                          516     ; <10=> Output drives a 0 for an Internal Application Reset, a 1 otherwise. Push-pull
                          517     ; <11=> Output drives a 0 for an Application Reset, a 1 otherwise. Push-pull
                          518     ; <12=> Output of ESRCFGx.OUT. Open-drain
                          519     ; <13=> Output of ESRCFGx.OUT. Open-drain
                          520     ; <14=> Output drives a 0 for an Internal Application Reset. Open-drain
                          521     ; <15=> Output drives a 0 for an Application Reset. Open-drain
 000E                     522     _ESR_PC0    EQU  14     ;  0 = No pull device activated. Input is not inverted
                          523                             ;  1 = Pull-down device activated. Input is not inverted
                          524                             ;  2 = Pull-up device activated. Input is not inverted
                          525                             ;  3 = No pull device activated. Input is not inverted
                          526                             ;  4 = No pull device activated. Input is inverted
                          527                             ;  5 = Pull-down device activated. Input is inverted
                          528                             ;  6 = Pull-up device activated. Input is inverted
                          529                             ;  7 = No pull device activated. Input is inverted
                          530                             ;  8 = Output of ESRCFGx.OUT. Push-pull
                          531                             ;  9 = Output of ESRCFGx.OUT. Push-pull
                          532                             ; 10 = Output drives a 0 for an Internal Application Reset, a 
                                  1 otherwise. Push-pull
                          533                             ; 11 = Output drives a 0 for an Application Reset, a 1 otherwi
                                  se. Push-pull
                          534                             ; 12 = Output of ESRCFGx.OUT. Open-drain
                          535                             ; 13 = Output of ESRCFGx.OUT. Open-drain
                          536                             ; 14 = Output drives a 0 for an Internal Application Reset. Op
                                  en-drain
                          537                             ; 15 = Output drives a 0 for an Application Reset. Open-drain
                          538     
                          539     
                          540     ; <o> ESR 1: Pin Control(ESRCFG.PC) if avalible
                          541     ; <0=> No pull device activated. Input is not inverted
                          542     ; <1=> Pull-down device activated. Input is not inverted
                          543     ; <2=> Pull-up device activated. Input is not inverted
                          544     ; <3=> No pull device activated. Input is not inverted
                          545     ; <4=> No pull device activated. Input is inverted
                          546     ; <5=> Pull-down device activated. Input is inverted
                          547     ; <6=> Pull-up device activated. Input is inverted
                          548     ; <7=> No pull device activated. Input is inverted
                          549     ; <8=> Output of ESRCFGx.OUT. Push-pull
                          550     ; <9=> Output of ESRCFGx.OUT. Push-pull
                          551     ; <10=> Output drives a 0 for an Internal Application Reset, a 1 otherwise. Push-pull
                          552     ; <11=> Output drives a 0 for an Application Reset, a 1 otherwise. Push-pull
                          553     ; <12=> Output of ESRCFGx.OUT. Open-drain
                          554     ; <13=> Output of ESRCFGx.OUT. Open-drain
                          555     ; <14=> Output drives a 0 for an Internal Application Reset. Open-drain
                          556     ; <15=> Output drives a 0 for an Application Reset. Open-drain
 0002                     557     _ESR_PC1    EQU  2      ;  0 =  No pull device activated. Input is not inverted
                          558                             ;  1 = Pull-down device activated. Input is not inverted
                          559                             ;  2 = Pull-up device activated. Input is not inverted
                          560                             ;  3 = No pull device activated. Input is not inverted
                          561                             ;  4 = No pull device activated. Input is inverted
                          562                             ;  5 = Pull-down device activated. Input is inverted
                          563                             ;  6 = Pull-up device activated. Input is inverted
                          564                             ;  7 = No pull device activated. Input is inverted
                          565                             ;  8 = Output of ESRCFGx.OUT. Push-pull
                          566                             ;  9 = Output of ESRCFGx.OUT. Push-pull
                          567                             ; 10 = Output drives a 0 for an Internal Application Reset, a 
                                  1 otherwise. Push-pull
                          568                             ; 11 = Output drives a 0 for an Application Reset, a 1 otherwi
                                  se. Push-pull
                          569                             ; 12 = Output of ESRCFGx.OUT. Open-drain
                          570                             ; 13 = Output of ESRCFGx.OUT. Open-drain
                          571                             ; 14 = Output drives a 0 for an Internal Application Reset. Op
                                  en-drain
                          572                             ; 15 = Output drives a 0 for an Application Reset. Open-drain
                          573     
A166 MACRO ASSEMBLER  START_V3                                                            08/07/2019 16:02:47 PAGE    10

                          574     
                          575     ; <o> ESR 2: Pin Control(ESRCFG.PC) if avalible
                          576     ; <0=> No pull device activated. Input is not inverted
                          577     ; <1=> Pull-down device activated. Input is not inverted
                          578     ; <2=> Pull-up device activated. Input is not inverted
                          579     ; <3=> No pull device activated. Input is not inverted
                          580     ; <4=> No pull device activated. Input is inverted
                          581     ; <5=> Pull-down device activated. Input is inverted
                          582     ; <6=> Pull-up device activated. Input is inverted
                          583     ; <7=> No pull device activated. Input is inverted
                          584     ; <8=> Output of ESRCFGx.OUT. Push-pull
                          585     ; <9=> Output of ESRCFGx.OUT. Push-pull
                          586     ; <10=> Output drives a 0 for an Internal Application Reset, a 1 otherwise. Push-pull
                          587     ; <11=> Output drives a 0 for an Application Reset, a 1 otherwise. Push-pull
                          588     ; <12=> Output of ESRCFGx.OUT. Open-drain
                          589     ; <13=> Output of ESRCFGx.OUT. Open-drain
                          590     ; <14=> Output drives a 0 for an Internal Application Reset. Open-drain
                          591     ; <15=> Output drives a 0 for an Application Reset. Open-drain
 0002                     592     _ESR_PC2    EQU  2      ;  0 =  No pull device activated. Input is not inverted
                          593                             ;  1 = Pull-down device activated. Input is not inverted
                          594                             ;  2 = Pull-up device activated. Input is not inverted
                          595                             ;  3 = No pull device activated. Input is not inverted
                          596                             ;  4 = No pull device activated. Input is inverted
                          597                             ;  5 = Pull-down device activated. Input is inverted
                          598                             ;  6 = Pull-up device activated. Input is inverted
                          599                             ;  7 = No pull device activated. Input is inverted
                          600                             ;  8 = Output of ESRCFGx.OUT. Push-pull
                          601                             ;  9 = Output of ESRCFGx.OUT. Push-pull
                          602                             ; 10 = Output drives a 0 for an Internal Application Reset, a 
                                  1 otherwise. Push-pull
                          603                             ; 11 = Output drives a 0 for an Application Reset, a 1 otherwi
                                  se. Push-pull
                          604                             ; 12 = Output of ESRCFGx.OUT. Open-drain
                          605                             ; 13 = Output of ESRCFGx.OUT. Open-drain
                          606                             ; 14 = Output drives a 0 for an Internal Application Reset. Op
                                  en-drain
                          607                             ; 15 = Output drives a 0 for an Application Reset. Open-drain
                          608     ; </e>
                          609     ;
                          610     ;
                          611     ;
                          612     ; <e> Watchdog Timer
                          613     ; ==================
                          614     ;
                          615     ; --- Set WATCHDOG = 0 to enable the Hardware watchdog and initialize the WDTCON regis
                                  ter
                          616     $SET (WATCHDOG = 0)     ; 0 = Disabled Hardware watchdog
                          617     ;
                          618     ; <o> IR: Input Frequency Request Bit (WDTCS.8)
                          619     ; <0=> Peripheral Frequency divided by 16384
                          620     ; <1=> Peripheral Frequency divided by 256 
 0000                     621     _IR       EQU    0      ; 0 = frequency f_peripheral / 16384 (CPU default)  
                          622                             ; 1 = frequency f_peripheral / 256
                          623     ;
                          624     ; <o> WDTREL: Watchdog Timer Reload Value (WDTREL0 .. WDTREL15) <0-65535>
                          625     ; <i> Reload value of WDT (counts up, overflow gives Watchdog reset)
 0000                     626     _WDTREL   EQU    0      
                          627     ;
                          628     ; </e>
                          629     ;
                          630     ; <h> External Bus Configuration
                          631     ;
                          632     ; <e> Configure External Bus (EBC) Behaviour
                          633     ; ==========================================
                          634     ;
                          635     ; --- Set CONFIG_EBC = 0 to initialize the EBCMOD0/EBCMOD1 registers
A166 MACRO ASSEMBLER  START_V3                                                            08/07/2019 16:02:47 PAGE    11

                          636     $SET (CONFIG_EBC = 0)   ; 0 = EBCMOD0/EBCMOD1 are set during reset according the 
                          637                             ;     of configuration bus (typical Port0) values.
                          638                             ; 1 = the following external bus configuration values
                          639                             ;     are written to EBCMOD and BUSACT0
                          640     ;
                          641     ; <h> Definitions for EBC Mode 0 register EBCMOD0
                          642     ; ===============================================
                          643     ;
                          644     ; <o> SAPEN: Segment Address Pins Enabled (EBCMOD0.0 .. EBCMOD0.3) <0-8>
                          645     ; <i> Number of active Address Lines (A16-A23)
 0000                     646     _SAPEN      EQU    0    ; 0 = No segment address pins enabled
                          647                             ; 1 = One (A16) segment address pin enabled
                          648                             ; : = :        
                          649                             ; 8 = Eight (A16 .. A23) address pins enabled
                          650                             ; 9 - 15 = reserved
                          651     ;
                          652     ; <o> CSPEN: CSx Pins Enabled (EBCMOD0.4 .. EBCMOD0.7) <0-8>
                          653     ; <i> Number of active ChipSelect pins
 0008                     654     _CSPEN      EQU    8    ; 0 = No CS pins enabled
                          655                             ; 1 = One CS (CS0) pin enabled
                          656                             ; : = :
                          657                             ; 8 = Eight CS (CS0 .. CS7) pins enabled
                          658                             ; 9 - 15 = reserved
                          659     ; Note: the number of available CS pins depends on the chip used
                          660     ;
                          661     ; <q> ARBEN: Enable Bus Arbitration Pins (EBCMOD0.8)
 0000                     662     _ARBEN      EQU    0    ; 0 = HOLD, HLDA and BREQ pins are tristate or act as GPIO
                          663                             ; 1 = HOLD, HLDA and BREQ pins act normally
                          664     ;
                          665     ; <o> SLAVE: SLAVE mode enable (EBCMOD0.9)
                          666     ; <0=> Master Mode  <1=> Slave Mode
 0000                     667     _SLAVE      EQU    0    ; 0 = Bus arbiter acts in master mode
                          668                             ; 1 = Bus arbiter acts in slave mode
                          669     ;
                          670     ; <q> EBCDIS: Disable EBC pins (EBCMOD0.10)
 0000                     671     _EBCDIS     EQU    0    ; 0 = EBC is using the pins for external bus
                          672                             ; 1 = EBC off (pins to be used as GPIO if implemented)
                          673     ;
                          674     ; <o> WRCFG: Configuration for pins WR/WRL and BHE/WRH (EBCMOD0.11)
                          675     ; <0=> WR and BHE  <1=> WRL and WRH
 0000                     676     _WRCFG      EQU    0    ; 0 = Pins act as WR and BHE
                          677                             ; 1 = Pins act as WRL and WRH
                          678     ;
                          679     ; <q> BYTDIS: Disable BHE pin (EBCMOD0.12)
 0000                     680     _BYTDIS     EQU    0    ; 0 = BHE enabled
                          681                             ; 1 = BHE disabled (GPIO function if implemented)
                          682     ;
                          683     ; <q> ALEDIS: Disable ALE pin (EBCMOD0.13)
 0000                     684     _ALEDIS     EQU    0    ; 0 = ALE pin enabled
                          685                             ; 1 = ALE pin disabled (GPIO function if implemented)
                          686     ;
                          687     ; <q> RDYDIS: Disable READY pin (EBCMOD0.14)
 0000                     688     _RDYDIS     EQU    0    ; 0 = READY enabled
                          689                             ; 1 = READY disabled (GPIO function if implemented)
                          690     ;
                          691     ; <o> RDYPOL: READY pin polarity (EBCMOD0.15)
                          692     ; <0=> Active Low  <1=> Active High
 0000                     693     _RDYPOL     EQU    0    ; 0 = READY pin is active low
                          694                             ; 1 = READY pin is active high
                          695     ;
                          696     ;</h>
                          697     ;
                          698     ; <h>Definitions for EBC Mode 1 register EBCMOD1
                          699     ; ==============================================
                          700     ;
                          701     ; <o> APDIS: Address Port Pins Disable (EBCMOD1.0 .. EBCMOD1.3) <0-15>
A166 MACRO ASSEMBLER  START_V3                                                            08/07/2019 16:02:47 PAGE    12

 0000                     702     _APDIS     EQU    0     ; 0  = Address bus pins 15-1 of PORT1 enabled
                          703                             ; 1  = Pin A15 disabled, A14-1 enabled
                          704                             ; 2  = Pin A15-A14 disabled, A13-1 enabled
                          705                             ; ...
                          706                             ; 15 = Pins A15-A1 disabled
                          707     ;
                          708     ; <q> A0PDIS: Address Bit 0 Pin Disable (EBCMOD1.4)
 0000                     709     _A0PDIS    EQU    0     ; 0 = Address bus pin 0 of PORT1 enabled
                          710                             ; 1 = Address bus pin 0 of PORT1 disabled
                          711     ;
                          712     ; <q> ALPDIS: Address Low Pins Disable (EBCMOD1.5)
 0000                     713     _ALPDIS    EQU    0     ; 0 = Address bus pin 7-0 generally enabled
                          714                             ; 1 = Address bus pin 7-0 of PORT1 disabled
                          715     ;
                          716     ; <q> DHPDIS: Data High Port Pins Disable (EBCMOD1.6)
 0000                     717     _DHPDIS    EQU    0     ; 0 = Data bus pins 15-8 of PORT0 enabled
                          718                             ; 1 = Data bus pins 15-8 disabled (used as GPIO)
                          719     ;
                          720     ; <q> WRPDIS: WR/WRL Pin Disable (EBCMOD1.7)
 0000                     721     _WRPDIS    EQU    0     ; 0 = WR/WRL pin of Port P20 enabled
                          722                             ; 1 = WR/WRL pin of Port P20 disabled
                          723     ;
                          724     ;</h></e>
                          725     ;
                          726     ; <e> Configure External Bus Behaviour for CS0 area
                          727     ; =================================================
                          728     ;
                          729     ; --- Set CONFIG_CS0 = 1 to initialize the FCONCS0/TCONCS0 registers
                          730     $SET (CONFIG_CS0 = 0)
                          731     ;
                          732     ; <h>Definitions for Function Configuration Register FCONCS0
                          733     ; ==========================================================
                          734     ;
                          735     ; <q> ENCS0: Enable Chip Select (FCONCS0.0)
 0001                     736     _ENCS0     EQU    1     ; 0 = Chip Select 0 disabled
                          737                             ; 1 = Chip Select 0 enabled
                          738     ;
                          739     ; <q> RDYEN0: Ready Enable (FCONCS0.1)
 0000                     740     _RDYEN0    EQU    0     ; 0 = Access time controlled by TCONCS0.PHE0
                          741                             ; 1 = Access time cont. by TCONCS0.PHE0 and READY signal
                          742     ;
                          743     ; <o> RDYMOD0: Ready Mode (FCONCS0.2) 
                          744     ; <0=> Asynchronous  <1=> Synchronous
 0000                     745     _RDYMOD0   EQU    0     ; 0 = Asynchronous READY
                          746                             ; 1 = Synchronous READY
                          747     ;
                          748     ; <o> BTYP0: Bus Type Selection (FCONCS0.4 .. FCONCS0.5)
                          749     ; <0=> 8-bit Demultiplexed Bus  <1=> 8-bit Multiplexed Bus
                          750     ; <2=> 16-bit Demultiplexed Bus <3=> 16-bit Multiplexed Bus
 0002                     751     _BTYP0     EQU    2     ; 0 = 8 bit Demultiplexed bus
                          752                             ; 1 = 8 bit Multiplexed bus
                          753                             ; 2 = 16 bit Demultiplexed bus
                          754                             ; 3 = 16 bit Multiplexed bus
                          755     ; </h>
                          756     ;
                          757     ; <h> TCONCS0: Definitions for the Timing Configuration register 
                          758     ; ==============================================================
                          759     ;
                          760     ; <o> PHA0: Phase A clock cycles (TCONCS0.0 .. TCONCS0.1) <0-3>
 0000                     761     _PHA0       EQU    0    ; 0 = 0 clock cycles
                          762                             ; : = : 
                          763                             ; 3 = 3 clock cycles
                          764     ;
                          765     ; <o> PHB0: Phase B clock cycles (TCONCS0.2) <1-2> <#-1>
 0000                     766     _PHB0       EQU    0    ; 0 = 1 clock cycle
                          767                             ; 1 = 2 clock cycles
A166 MACRO ASSEMBLER  START_V3                                                            08/07/2019 16:02:47 PAGE    13

                          768     ;
                          769     ; <o> PHC0: Phase C clock cycles (TCONCS0.3 .. TCONCS0.4) <0-3>
 0000                     770     _PHC0       EQU    0    ; 0 = 0 clock cycles
                          771                             ; : = :
                          772                             ; 3 = 3 clock cycles
                          773     ;
                          774     ; <o> PHD0: Phase D clock cycle (TCONCS0.5) <0-1>
 0000                     775     _PHD0       EQU    0    ; 0 = 0 clock cycles
                          776                             ; 1 = 1 clock cycle
                          777     ;
                          778     ; <o> PHE0: Phase E clock cycles (TCONCS0.6 .. TCONCS0.10) <1-32> <#-1>
 0008                     779     _PHE0       EQU    8    ; 0 = 1 clock cycle
                          780                             ; : = :
                          781                             ; 31 = 32 clock cycles
                          782     ;
                          783     ; <o> RDPHF0: Phase F read clock cycles (TCONCS0.11 .. TCONCS0.12) <0-3>
 0000                     784     _RDPHF0     EQU    0    ; 0 = 0 clock cycles
                          785                             ; : = :
                          786                             ; 3 = 3 clock cycles
                          787     ;
                          788     ; <o> WRPHF0: Phase F write clock cycles (TCONCS0.13 .. TCONCS0.14) <0-3>
 0003                     789     _WRPHF0     EQU    3    ; 0 = 0 clock cycles
                          790                             ; : = :
                          791                             ; 3 = 3 clock cycles
                          792     ;</h> </e>
                          793     ;
                          794     ; <e> Configure External Bus Behaviour for CS1 Area
                          795     ; =================================================
                          796     ;
                          797     ; --- Set CONFIG_CS1 = 1 to initialize the ADDRSEL1/FCONCS1/TCONCS1 registers
                          798     $SET (CONFIG_CS1 = 0)
                          799     ;
                          800     ; <h>Definitions for Address Select register ADDRSEL1
                          801     ; ===================================================
                          802     ; <o> CS1 Start Address   <0x0-0xFFFFFF:0x1000>
 00100000                 803     _ADDR1      EQU 0x100000     ; Set CS1# Start Address (default 100000H)
                          804     
                          805     ; <o> CS1 Size in KB      
                          806     ; <4=>    4KB      <8=>    8KB      <16=>   16KB     <32=>   32KB   
                          807     ; <64=>   64KB     <128=>  128KB    <256=>  256KB    <512=>  512KB
                          808     ; <1024=> 1024KB   <2048=> 2048KB   <4096=> 4096KB   <8192=> 8192KB
 00100000                 809     _SIZE1      EQU 1024*KB         ; Set CS1# Size (default 1024*KB = 1*MB)
                          810                                  ; possible values for _SIZE1 are:
                          811                                  ;    4*KB            (gives RGSZ1 = 0)
                          812                                  ;    8*KB            (gives RGSZ1 = 1)
                          813                                  ;   16*KB            (gives RGSZ1 = 2)
                          814                                  ;   32*KB            (gives RGSZ1 = 3)
                          815                                  ;   64*KB            (gives RGSZ1 = 4)
                          816                                  ;  128*KB            (gives RGSZ1 = 5)
                          817                                  ;  256*KB            (gives RGSZ1 = 6)
                          818                                  ;  512*KB            (gives RGSZ1 = 7)
                          819                                  ; 1024*KB  or  1*MB  (gives RGSZ1 = 8)
                          820                                  ; 2048*KB  or  2*MB  (gives RGSZ1 = 9)
                          821                                  ; 4096*KB  or  4*MB  (gives RGSZ1 = 10)
                          822                                  ; 8192*KB  or  8*MB  (gives RGSZ1 = 11)
                          823                                  ;                    (RGSZ1 = 12 .. 15 reserved)
                          824     ;</h>
                          825     ;
                          826     ; <h>Definitions for Function Configuration Register FCONCS1
                          827     ; ==========================================================
                          828     ;
                          829     ; <q> ENCS1: Enable Chip Select (FCONCS1.0)
 0001                     830     _ENCS1     EQU    1     ; 0 = Chip Select 0 disabled
                          831                             ; 1 = Chip Select 0 enabled
                          832     ;
                          833     ; <q> RDYEN1: Ready Enable (FCONCS1.1)
A166 MACRO ASSEMBLER  START_V3                                                            08/07/2019 16:02:47 PAGE    14

 0000                     834     _RDYEN1    EQU    0     ; 0 = Access time controlled by TCONCS1.PHE1
                          835                             ; 1 = Access time cont. by TCONCS1.PHE1 and READY signal
                          836     ;
                          837     ; <o> RDYMOD1: Ready Mode (FCONCS1.2)
                          838     ; <0=> Asynchronous  <1=> Synchronous
 0000                     839     _RDYMOD1   EQU    0     ; 0 = Asynchronous READY
                          840                             ; 1 = Synchronous READY
                          841     ;
                          842     ; <o> BTYP1: Bus Type Selection (FCONCS1.4 .. FCONCS1.5)
                          843     ; <0=> 8-bit Demultiplexed Bus  <1=> 8-bit Multiplexed Bus
                          844     ; <2=> 16-bit Demultiplexed Bus <3=> 16-bit Multiplexed Bus
 0002                     845     _BTYP1     EQU    2     ; 0 = 8 bit Demultiplexed bus
                          846                             ; 1 = 8 bit Multiplexed bus
                          847                             ; 2 = 16 bit Demultiplexed bus
                          848                             ; 3 = 16 bit Multiplexed bus
                          849     ;</h>
                          850     ;
                          851     ; <h>TCONCS1: Definitions for the Timing Configuration register 
                          852     ; =============================================================
                          853     ;
                          854     ; <o>PHA1: Phase A clock cycles (TCONCS1.0 .. TCONCS1.1) <0-3>
 0000                     855     _PHA1       EQU    0    ; 0 = 0 clock cycles
                          856                             ; : = : 
                          857                             ; 3 = 3 clock cycles
                          858     ;
                          859     ; <o>PHB1: Phase B clock cycles (TCONCS1.2) <1-2> <#-1>
 0000                     860     _PHB1       EQU    0    ; 0 = 1 clock cycle
                          861                             ; 1 = 2 clock cycles
                          862     ;
                          863     ; <o>PHC1: Phase C clock cycles (TCONCS1.3 .. TCONCS1.4) <0-3>
 0000                     864     _PHC1       EQU    0    ; 0 = 0 clock cycles
                          865                             ; : = :
                          866                             ; 3 = 3 clock cycles
                          867     ;
                          868     ; <o>PHD1: Phase D clock cycles (TCONCS1.5) <0-1>
 0000                     869     _PHD1       EQU    0    ; 0 = 0 clock cycles
                          870                             ; 1 = 1 clock cycle
                          871     ;
                          872     ; <o> PHE1: Phase E clock cycles (TCONCS1.6 .. TCONCS1.10) <1-32> <#-1>
 0008                     873     _PHE1       EQU    8    ; 0 = 1 clock cycle
                          874                             ; : = :
                          875                             ; 31 = 32 clock cycles
                          876     ;
                          877     ; <o>RDPHF1: Phase F read clock cycles (TCONCS1.11 .. TCONCS1.12) <0-3>
 0000                     878     _RDPHF1     EQU    0    ; 0 = 0 clock cycles
                          879                             ; : = :
                          880                             ; 3 = 3 clock cycles
                          881     ;
                          882     ; <o>WRPHF1: Phase F write clock cycles (TCONCS1.13 .. TCONCS1.14) <0-3>
 0003                     883     _WRPHF1     EQU    3    ; 0 = 0 clock cycles
                          884                             ; : = :
                          885                             ; 3 = 3 clock cycles
                          886     ;</h> </e>
                          887     ;
                          888     ;<e>Configure External Bus Behaviour for CS2 Area
                          889     ;   =============================================
                          890     ;
                          891     ; --- Set CONFIG_CS2 = 1 to initialize the ADDRSEL2/FCONCS2/TCONCS2 registers
                          892     $SET (CONFIG_CS2 = 0)
                          893     ;
                          894     ; <h>Definitions for Address Select register ADDRSEL2
                          895     ; ===================================================
                          896     ; <o> CS2 Start Address   <0x0-0xFFFFFF:0x1000>
 00200000                 897     _ADDR2      EQU 0x200000     ; Set CS2# Start Address (default 100000H)
                          898     
                          899     ; <o> CS2 Size in KB      
A166 MACRO ASSEMBLER  START_V3                                                            08/07/2019 16:02:47 PAGE    15

                          900     ; <4=>    4KB      <8=>    8KB      <16=>   16KB     <32=>   32KB
                          901     ; <64=>   64KB     <128=>  128KB    <256=>  256KB    <512=>  512KB
                          902     ; <1024=> 1024KB   <2048=> 2048KB   <4096=> 4096KB   <8192=> 8192KB
 00100000                 903     _SIZE2      EQU 1024*KB         ; Set CS2# Size (default 1024*KB = 1*MB)
                          904                                  ; possible values for _SIZE2 are:
                          905                                  ;    4*KB            (gives RGSZ2 = 0)
                          906                                  ;    8*KB            (gives RGSZ2 = 1)
                          907                                  ;   16*KB            (gives RGSZ2 = 2)
                          908                                  ;   32*KB            (gives RGSZ2 = 3)
                          909                                  ;   64*KB            (gives RGSZ2 = 4)
                          910                                  ;  128*KB            (gives RGSZ2 = 5)
                          911                                  ;  256*KB            (gives RGSZ2 = 6)
                          912                                  ;  512*KB            (gives RGSZ2 = 7)
                          913                                  ; 1024*KB  or  1*MB  (gives RGSZ2 = 8)
                          914                                  ; 2048*KB  or  2*MB  (gives RGSZ2 = 9)
                          915                                  ; 4096*KB  or  4*MB  (gives RGSZ2 = 10)
                          916                                  ; 8192*KB  or  8*MB  (gives RGSZ2 = 11)
                          917                                  ;                    (RGSZ2 = 12 .. 15 reserved)
                          918     ;</h>
                          919     ;
                          920     ; <h>Definitions for Function Configuration Register FCONCS2
                          921     ; ==========================================================
                          922     ;
                          923     ; <q> ENCS2: Enable Chip Select (FCONCS2.0)
 0001                     924     _ENCS2     EQU    1     ; 0 = Chip Select 0 disabled
                          925                             ; 1 = Chip Select 0 enabled
                          926     ;
                          927     ; <q> RDYEN2: Ready Enable (FCONCS2.1)
 0000                     928     _RDYEN2    EQU    0     ; 0 = Access time controlled by TCONCS2.PHE1
                          929                             ; 1 = Access time cont. by TCONCS2.PHE1 and READY signal
                          930     ;
                          931     ; <o> RDYMOD2: Ready Mode (FCONCS2.2)
                          932     ; <0=> Asynchronous  <1=> Synchronous
 0000                     933     _RDYMOD2   EQU    0     ; 0 = Asynchronous READY
                          934                             ; 1 = Synchronous READY
                          935     ;
                          936     ; <o> BTYP2: Bus Type Selection (FCONCS2.4 .. FCONCS2.5)
                          937     ; <0=> 8-bit Demultiplexed Bus  <1=> 8-bit Multiplexed Bus
                          938     ; <2=> 16-bit Demultiplexed Bus <3=> 16-bit Multiplexed Bus
 0002                     939     _BTYP2     EQU    2     ; 0 = 8 bit Demultiplexed bus
                          940                             ; 1 = 8 bit Multiplexed bus
                          941                             ; 2 = 16 bit Demultiplexed bus
                          942                             ; 3 = 16 bit Multiplexed bus
                          943     ;</h>
                          944     ;
                          945     ; <h>TCONCS2: Definitions for the Timing Configuration register 
                          946     ; =============================================================
                          947     ;
                          948     ; <o>PHA2: Phase A clock cycle (TCONCS2.0 .. TCONCS2.1) <0-3>
 0000                     949     _PHA2       EQU    0    ; 0 = 0 clock cycles
                          950                             ; : = : 
                          951                             ; 3 = 3 clock cycles
                          952     ;
                          953     ; <o>PHB2: Phase B clock cycle (TCONCS2.2) <1-2> <#-1>
 0000                     954     _PHB2       EQU    0    ; 0 = 1 clock cycle
                          955                             ; 1 = 2 clock cycles
                          956     ;
                          957     ; <o>PHC2: Phase C clock cycle (TCONCS2.3 .. TCONCS2.4) <0-3>
 0000                     958     _PHC2       EQU    0    ; 0 = 0 clock cycles
                          959                             ; : = :
                          960                             ; 3 = 3 clock cycles
                          961     ;
                          962     ; <o>PHD2: Phase D clock cycle (TCONCS2.5) <0-1>
 0000                     963     _PHD2       EQU    0    ; 0 = 0 clock cycles
                          964                             ; 1 = 1 clock cycle
                          965     ;
A166 MACRO ASSEMBLER  START_V3                                                            08/07/2019 16:02:47 PAGE    16

                          966     ; <o> PHE2: Phase E clock cycle (TCONCS2.6 .. TCONCS2.10) <1-32> <#-1>
 0008                     967     _PHE2       EQU    8    ; 0 = 1 clock cycle
                          968                             ; : = :
                          969                             ; 31 = 32 clock cycles
                          970     ;
                          971     ; <o>RDPHF2: Phase F read clock cycle (TCONCS2.11 .. TCONCS2.12) <0-3>
 0000                     972     _RDPHF2     EQU    0    ; 0 = 0 clock cycles
                          973                             ; : = :
                          974                             ; 3 = 3 clock cycles
                          975     ;
                          976     ; <o>WRPHF2: Phase F write clock cycle (TCONCS2.13 .. TCONCS2.14) <0-3>
 0003                     977     _WRPHF2     EQU    3    ; 0 = 0 clock cycles
                          978                             ; : = :
                          979                             ; 3 = 3 clock cycles
                          980     ;</h> </e>
                          981     ;
                          982     ;<e>Configure External Bus Behaviour for CS3 Area
                          983     ;   =============================================
                          984     ;
                          985     ; --- Set CONFIG_CS3 = 1 to initialize the ADDRSEL3/FCONCS3/TCONCS3 registers
                          986     $SET (CONFIG_CS3 = 0)
                          987     ;
                          988     ; <h>Definitions for Address Select register ADDRSEL3
                          989     ; ===================================================
                          990     ; <o> CS3 Start Address   <0x0-0xFFFFFF:0x1000>
 00300000                 991     _ADDR3      EQU 0x300000     ; Set CS3# Start Address (default 100000H)
                          992     
                          993     ; <o> CS2 Size in KB      
                          994     ; <4=>    4KB      <8=>    8KB      <16=>   16KB     <32=>   32KB
                          995     ; <64=>   64KB     <128=>  128KB    <256=>  256KB    <512=>  512KB
                          996     ; <1024=> 1024KB   <2048=> 2048KB   <4096=> 4096KB   <8192=> 8192KB
 00100000                 997     _SIZE3      EQU 1024*KB         ; Set CS3# Size (default 1024*KB = 1*MB)
                          998                                  ; possible values for _SIZE3 are:
                          999                                  ;    4*KB            (gives RGSZ3 = 0)
                         1000                                  ;    8*KB            (gives RGSZ3 = 1)
                         1001                                  ;   16*KB            (gives RGSZ3 = 2)
                         1002                                  ;   32*KB            (gives RGSZ3 = 3)
                         1003                                  ;   64*KB            (gives RGSZ3 = 4)
                         1004                                  ;  128*KB            (gives RGSZ3 = 5)
                         1005                                  ;  256*KB            (gives RGSZ3 = 6)
                         1006                                  ;  512*KB            (gives RGSZ3 = 7)
                         1007                                  ; 1024*KB  or  1*MB  (gives RGSZ3 = 8)
                         1008                                  ; 2048*KB  or  2*MB  (gives RGSZ3 = 9)
                         1009                                  ; 4096*KB  or  4*MB  (gives RGSZ3 = 10)
                         1010                                  ; 8192*KB  or  8*MB  (gives RGSZ3 = 11)
                         1011                                  ;                    (RGSZ3 = 12 .. 15 reserved)
                         1012     ;</h>
                         1013     ;
                         1014     ; <h>Definitions for Function Configuration Register FCONCS3
                         1015     ; ==========================================================
                         1016     ;
                         1017     ; <q> ENCS3: Enable Chip Select (FCONCS3.0)
 0001                    1018     _ENCS3     EQU    1     ; 0 = Chip Select 0 disabled
                         1019                             ; 1 = Chip Select 0 enabled
                         1020     ;
                         1021     ; <q> RDYEN3: Ready Enable (FCONCS3.1)
 0000                    1022     _RDYEN3    EQU    0     ; 0 = Access time controlled by TCONCS3.PHE1
                         1023                             ; 1 = Access time cont. by TCONCS3.PHE1 and READY signal
                         1024     ;
                         1025     ; <o> RDYMOD3: Ready Mode (FCONCS3.2)
                         1026     ; <0=> Asynchronous  <1=> Synchronous
 0000                    1027     _RDYMOD3   EQU    0     ; 0 = Asynchronous READY
                         1028                             ; 1 = Synchronous READY
                         1029     ;
                         1030     ; <o> BTYP3  Bus Type Selection (FCONCS3.4 .. FCONCS3.5)
                         1031     ; <0=> 8-bit Demultiplexed Bus  <1=> 8-bit Multiplexed Bus
A166 MACRO ASSEMBLER  START_V3                                                            08/07/2019 16:02:47 PAGE    17

                         1032     ; <2=> 16-bit Demultiplexed Bus <3=> 16-bit Multiplexed Bus
 0002                    1033     _BTYP3     EQU    2     ; 0 = 8 bit Demultiplexed bus
                         1034                             ; 1 = 8 bit Multiplexed bus
                         1035                             ; 2 = 16 bit Demultiplexed bus
                         1036                             ; 3 = 16 bit Multiplexed bus
                         1037     ;</h>
                         1038     ;
                         1039     ; <h>TCONCS3: Definitions for the Timing Configuration register 
                         1040     ; =============================================================
                         1041     ;
                         1042     ; <o>PHA3: Phase A clock cycle (TCONCS3.0 .. TCONCS3.1) <0-3>
 0000                    1043     _PHA3       EQU    0    ; 0 = 0 clock cycles
                         1044                             ; : = : 
                         1045                             ; 3 = 3 clock cycles
                         1046     ;
                         1047     ; <o>PHB3: Phase B clock cycle (TCONCS2.2) <1-2> <#-1>
 0000                    1048     _PHB3       EQU    0    ; 0 = 1 clock cycle
                         1049                             ; 1 = 2 clock cycles
                         1050     ;
                         1051     ; <o>PHC3: Phase C clock cycle (TCONCS3.3 .. TCONCS3.4) <0-3>
 0000                    1052     _PHC3       EQU    0    ; 0 = 0 clock cycles
                         1053                             ; : = :
                         1054                             ; 3 = 3 clock cycles
                         1055     ;
                         1056     ; <o>PHD3: Phase D clock cycle (TCONCS3.5) <0-1>
 0000                    1057     _PHD3       EQU    0    ; 0 = 0 clock cycles
                         1058                             ; 1 = 1 clock cycle
                         1059     ;
                         1060     ; <o> PHE3: Phase E clock cycle (TCONCS3.6 .. TCONCS3.10) <1-32> <#-1>
 0008                    1061     _PHE3       EQU    8    ; 0 = 1 clock cycle
                         1062                             ; : = :
                         1063                             ; 31 = 32 clock cycles
                         1064     ;
                         1065     ; <o>RDPHF3: Phase F read clock cycle (TCONCS3.11 .. TCONCS3.12) <0-3>
 0000                    1066     _RDPHF3     EQU    0    ; 0 = 0 clock cycles
                         1067                             ; : = :
                         1068                             ; 3 = 3 clock cycles
                         1069     ;
                         1070     ; <o>WRPHF3: Phase F write clock cycle (TCONCS3.13 .. TCONCS3.14) <0-3>
 0003                    1071     _WRPHF3     EQU    3    ; 0 = 0 clock cycles
                         1072                             ; : = :
                         1073                             ; 3 = 3 clock cycles
                         1074     ;</h> </e>
                         1075     ;
                         1076     ;<e>Configure External Bus Behaviour for CS4 Area
                         1077     ;   =============================================
                         1078     ;
                         1079     ; --- Set CONFIG_CS4 = 1 to initialize the ADDRSEL4/FCONCS4/TCONCS4 registers
                         1080     $SET (CONFIG_CS4 = 0)
                         1081     ;
                         1082     ; <h>Definitions for Address Select register ADDRSEL4
                         1083     ; ===================================================
                         1084     ; <o> CS4 Start Address   <0x0-0xFFFFFF:0x1000>
 00400000                1085     _ADDR4      EQU 0x400000     ; Set CS4# Start Address (default 100000H)
                         1086     
                         1087     ; <o> CS4 Size in KB      
                         1088     ; <4=>    4KB      <8=>    8KB      <16=>   16KB     <32=>   32KB
                         1089     ; <64=>   64KB     <128=>  128KB    <256=>  256KB    <512=>  512KB
                         1090     ; <1024=> 1024KB   <2048=> 2048KB   <4096=> 4096KB   <8192=> 8192KB
 00100000                1091     _SIZE4      EQU 1024*KB         ; Set CS4# Size (default 1024*KB = 1*MB)
                         1092                                  ; possible values for _SIZE4 are:
                         1093                                  ;    4*KB            (gives RGSZ4 = 0)
                         1094                                  ;    8*KB            (gives RGSZ4 = 1)
                         1095                                  ;   16*KB            (gives RGSZ4 = 2)
                         1096                                  ;   32*KB            (gives RGSZ4 = 3)
                         1097                                  ;   64*KB            (gives RGSZ4 = 4)
A166 MACRO ASSEMBLER  START_V3                                                            08/07/2019 16:02:47 PAGE    18

                         1098                                  ;  128*KB            (gives RGSZ4 = 5)
                         1099                                  ;  256*KB            (gives RGSZ4 = 6)
                         1100                                  ;  512*KB            (gives RGSZ4 = 7)
                         1101                                  ; 1024*KB  or  1*MB  (gives RGSZ4 = 8)
                         1102                                  ; 2048*KB  or  2*MB  (gives RGSZ4 = 9)
                         1103                                  ; 4096*KB  or  4*MB  (gives RGSZ4 = 10)
                         1104                                  ; 8192*KB  or  8*MB  (gives RGSZ4 = 11)
                         1105                                  ;                    (RGSZ4 = 12 .. 15 reserved)
                         1106     ;</h>
                         1107     ;
                         1108     ; <h>Definitions for Function Configuration Register FCONCS4
                         1109     ; ==========================================================
                         1110     ;
                         1111     ; <q> ENCS4: Enable Chip Select (FCONCS4.0)
 0001                    1112     _ENCS4     EQU    1     ; 0 = Chip Select 0 disabled
                         1113                             ; 1 = Chip Select 0 enabled
                         1114     ;
                         1115     ; <q> RDYEN4: Ready Enable (FCONCS4.1)
 0000                    1116     _RDYEN4    EQU    0     ; 0 = Access time controlled by TCONCS4.PHE1
                         1117                             ; 1 = Access time cont. by TCONCS4.PHE1 and READY signal
                         1118     ;
                         1119     ; <o> RDYMOD4: Ready Mode (FCONCS4.2)
                         1120     ; <0=> Asynchronous  <1=> Synchronous
 0000                    1121     _RDYMOD4   EQU    0     ; 0 = Asynchronous READY
                         1122                             ; 1 = Synchronous READY
                         1123     ;
                         1124     ; <o> BTYP4: Bus Type Selection (FCONCS4.4 .. FCONCS4.5)
                         1125     ; <0=> 8-bit Demultiplexed Bus  <1=> 8-bit Multiplexed Bus
                         1126     ; <2=> 16-bit Demultiplexed Bus <3=> 16-bit Multiplexed Bus
 0002                    1127     _BTYP4     EQU    2     ; 0 = 8 bit Demultiplexed bus
                         1128                             ; 1 = 8 bit Multiplexed bus
                         1129                             ; 2 = 16 bit Demultiplexed bus
                         1130                             ; 3 = 16 bit Multiplexed bus
                         1131     ;</h>
                         1132     ;
                         1133     ; <h>TCONCS4: Definitions for the Timing Configuration register 
                         1134     ; =============================================================
                         1135     ;
                         1136     ; <o>PHA4: Phase A clock cycle (TCONCS4.0 .. TCONCS4.1) <0-3>
 0000                    1137     _PHA4       EQU    0    ; 0 = 0 clock cycles
                         1138                             ; : = : 
                         1139                             ; 3 = 3 clock cycles
                         1140     ;
                         1141     ; <o>PHB4: Phase B clock cycle (TCONCS4.2) <1-2> <#-1>
 0000                    1142     _PHB4       EQU    0    ; 0 = 1 clock cycle
                         1143                             ; 1 = 2 clock cycles
                         1144     ;
                         1145     ; <o>PHC4: Phase C clock cycle (TCONCS4.3 .. TCONCS4.4) <0-3>
 0000                    1146     _PHC4       EQU    0    ; 0 = 0 clock cycles
                         1147                             ; : = :
                         1148                             ; 3 = 3 clock cycles
                         1149     ;
                         1150     ; <o>PHD4: Phase D clock cycle (TCONCS4.5) <0-1>
 0000                    1151     _PHD4       EQU    0    ; 0 = 0 clock cycles
                         1152                             ; 1 = 1 clock cycle
                         1153     ;
                         1154     ; <o> PHE4: Phase E clock cycle (TCONCS4.6 .. TCONCS4.10) <1-32> <#-1>
 0008                    1155     _PHE4       EQU    8    ; 0 = 1 clock cycle
                         1156                             ; : = :
                         1157                             ; 31 = 32 clock cycles
                         1158     ;
                         1159     ; <o>RDPHF4: Phase F read clock cycle (TCONCS4.11 .. TCONCS4.12) <0-3>
 0000                    1160     _RDPHF4     EQU    0    ; 0 = 0 clock cycles
                         1161                             ; : = :
                         1162                             ; 3 = 3 clock cycles
                         1163     ;
A166 MACRO ASSEMBLER  START_V3                                                            08/07/2019 16:02:47 PAGE    19

                         1164     ; <o>WRPHF4: Phase F write clock cycle (TCONCS4.13 .. TCONCS4.14) <0-3>
 0003                    1165     _WRPHF4     EQU    3    ; 0 = 0 clock cycles
                         1166                             ; : = :
                         1167                             ; 3 = 3 clock cycles
                         1168     ;</h> </e>
                         1169     ;
                         1170     ;<e>Configure External Bus Behaviour for CS7 Area
                         1171     ;   =============================================
                         1172     ;
                         1173     ; --- Set CONFIG_CS7 = 1 to initialize the ADDRSEL7/FCONCS7/TCONCS7 registers
                         1174     $SET (CONFIG_CS7 = 0)
                         1175     ;
                         1176     ; <h>Definitions for Address Select register ADDRSEL7
                         1177     ; ===================================================
                         1178     ; <o> CS7 Start Address   <0x0-0xFFFFFF:0x1000>
 00700000                1179     _ADDR7      EQU 0x700000     ; Set CS7# Start Address (default 100000H)
                         1180     
                         1181     ; <o> CS7 Size in KB      
                         1182     ; <4=>    4KB      <8=>    8KB      <16=>   16KB     <32=>   32KB
                         1183     ; <64=>   64KB     <128=>  128KB    <256=>  256KB    <512=>  512KB
                         1184     ; <1024=> 1024KB   <2048=> 2048KB   <4096=> 4096KB   <8192=> 8192KB
 00100000                1185     _SIZE7      EQU 1024*KB         ; Set CS7# Size (default 1024*KB = 1*MB)
                         1186                                  ; possible values for _SIZE7 are:
                         1187                                  ;    4*KB            (gives RGSZ7 = 0)
                         1188                                  ;    8*KB            (gives RGSZ7 = 1)
                         1189                                  ;   16*KB            (gives RGSZ7 = 2)
                         1190                                  ;   32*KB            (gives RGSZ7 = 3)
                         1191                                  ;   64*KB            (gives RGSZ7 = 4)
                         1192                                  ;  128*KB            (gives RGSZ7 = 5)
                         1193                                  ;  256*KB            (gives RGSZ7 = 6)
                         1194                                  ;  512*KB            (gives RGSZ7 = 7)
                         1195                                  ; 1024*KB  or  1*MB  (gives RGSZ7 = 8)
                         1196                                  ; 2048*KB  or  2*MB  (gives RGSZ7 = 9)
                         1197                                  ; 4096*KB  or  4*MB  (gives RGSZ7 = 10)
                         1198                                  ; 8192*KB  or  8*MB  (gives RGSZ7 = 11)
                         1199                                  ;                    (RGSZ7 = 12 .. 15 reserved)
                         1200     ;</h>
                         1201     ;
                         1202     ; <h>Definitions for Function Configuration Register FCONCS7
                         1203     ; ==========================================================
                         1204     ;
                         1205     ; <q> ENCS7: Enable Chip Select (FCONCS7.0)
 0001                    1206     _ENCS7     EQU    1     ; 0 = Chip Select 0 disabled
                         1207                             ; 1 = Chip Select 0 enabled
                         1208     ;
                         1209     ; <q> RDYEN7: Ready Enable (FCONCS7.1)
 0000                    1210     _RDYEN7    EQU    0     ; 0 = Access time controlled by TCONCS7.PHE1
                         1211                             ; 1 = Access time cont. by TCONCS7.PHE1 and READY signal
                         1212     ;
                         1213     ; <o> RDYMOD7: Ready Mode (FCONCS7.2)
                         1214     ; <0=> Asynchronous  <1=> Synchronous
 0000                    1215     _RDYMOD7   EQU    0     ; 0 = Asynchronous READY
                         1216                             ; 1 = Synchronous READY
                         1217     ;
                         1218     ; <o> BTYP7: Bus Type Selection (FCONCS7.4 .. FCONCS7.5)
                         1219     ; <0=> 8-bit Demultiplexed Bus  <1=> 8-bit Multiplexed Bus
                         1220     ; <2=> 16-bit Demultiplexed Bus <3=> 16-bit Multiplexed Bus
 0002                    1221     _BTYP7     EQU    2     ; 0 = 8 bit Demultiplexed bus
                         1222                             ; 1 = 8 bit Multiplexed bus
                         1223                             ; 2 = 16 bit Demultiplexed bus
                         1224                             ; 3 = 16 bit Multiplexed bus
                         1225     ;</h>
                         1226     ;
                         1227     ; <h>TCONCS7: Definitions for the Timing Configuration register 
                         1228     ; =============================================================
                         1229     ;
A166 MACRO ASSEMBLER  START_V3                                                            08/07/2019 16:02:47 PAGE    20

                         1230     ; <o>PHA7: Phase A clock cycle (TCONCS7.0 .. TCONCS7.1) <0-3>
 0000                    1231     _PHA7       EQU    0    ; 0 = 0 clock cycles
                         1232                             ; : = : 
                         1233                             ; 3 = 3 clock cycles
                         1234     ;
                         1235     ; <o>PHB7: Phase B clock cycle (TCONCS7.2) <1-2> <#-1>
 0000                    1236     _PHB7       EQU    0    ; 0 = 1 clock cycle
                         1237                             ; 1 = 2 clock cycles
                         1238     ;
                         1239     ; <o>PHC7: Phase C clock cycle (TCONCS7.3 .. TCONCS7.4) <0-3>
 0000                    1240     _PHC7       EQU    0    ; 0 = 0 clock cycles
                         1241                             ; : = :
                         1242                             ; 3 = 3 clock cycles
                         1243     ;
                         1244     ; <o>PHD27 Phase D clock cycle (TCONCS2.5) <0-1>
 0000                    1245     _PHD7       EQU    0    ; 0 = 0 clock cycles
                         1246                             ; 1 = 1 clock cycle
                         1247     ;
                         1248     ; <o> PHE7: Phase E clock cycle (TCONCS7.6 .. TCONCS7.10) <1-32> <#-1>
 0008                    1249     _PHE7       EQU    8    ; 0 = 1 clock cycle
                         1250                             ; : = :
                         1251                             ; 31 = 32 clock cycles
                         1252     ;
                         1253     ; <o>RDPHF7: Phase F read clock cycle (TCONCS7.11 .. TCONCS7.12) <0-3>
 0000                    1254     _RDPHF7     EQU    0    ; 0 = 0 clock cycles
                         1255                             ; : = :
                         1256                             ; 3 = 3 clock cycles
                         1257     ;
                         1258     ; <o>WRPHF7: Phase F write clock cycle (TCONCS7.13 .. TCONCS7.14) <0-3>
 0003                    1259     _WRPHF7     EQU    3    ; 0 = 0 clock cycles
                         1260                             ; : = :
                         1261                             ; 3 = 3 clock cycles
                         1262     ;</h> </e>
                         1263     ;
                         1264     ; </h>
                         1265     ; <<< end of configuration section >>>
                         1266     
                         1267     
                                  $IF TINY
                                  $SET (DPPUSE = 0)
                         1270     $ENDIF
                         1271     
                         1272     
                         1273     $IF NOT TINY
                         1274     ASSUME  DPP3:SYSTEM
                         1275     ASSUME  DPP2:NDATA
                         1276     $ENDIF
                         1277     
                         1278     NAME    ?C_STARTUP
                         1279     PUBLIC  ?C_STARTUP
                         1280     PUBLIC  ?L?VECSC
                         1281     
 0000                    1282     ?L?VECSC        EQU     _VECSC   ; Interrupt Vector Spacing for L166
                         1283     
                                  $IF MEDIUM OR LARGE OR HLARGE OR XLARGE
                                  Model   LIT     'FAR'
                         1286     $ELSE
                         1287     Model   LIT     'NEAR'
                         1288     $ENDIF
                         1289     
                         1290     EXTRN   main:NEAR
                         1291     
                         1292     PUBLIC          ?C_USRSTKBOT
                         1293     
--------                 1294     ?C_USERSTACK    SECTION DATA PUBLIC 'NDATA'
                         1295     ?C_USRSTKBOT:
A166 MACRO ASSEMBLER  START_V3                                                            08/07/2019 16:02:47 PAGE    21

00000000                 1296                     DS      USTSZ           ; Size of User Stack
                         1297     ?C_USERSTKTOP:
--------                 1298     ?C_USERSTACK    ENDS
                         1299     
                         1300     
                         1301     IF UST1SZ > 0                           ; Define User Stack 1 area
--------                 1302     ?C_USERSTACK1   SECTION DATA PUBLIC 'NDATA'
                         1303     ?C_USRSTKBOT1:
00000000                 1304                     DS      UST1SZ          ; Size of User Stack 1
                         1305     ?C_USERSTKTOP1:
--------                 1306     ?C_USERSTACK1   ENDS
                         1307     ENDIF
                         1308     
                         1309     IF UST2SZ > 0                           ; Define User Stack 2 area
--------                 1310     ?C_USERSTACK2   SECTION DATA PUBLIC 'NDATA'
                         1311     ?C_USRSTKBOT2:
00000000                 1312                     DS      UST2SZ          ; Size of User Stack 2
                         1313     ?C_USERSTKTOP2:
--------                 1314     ?C_USERSTACK2   ENDS
                         1315     ENDIF
                         1316     
                         1317     $IF NOT TINY
                         1318     IF (UST1SZ > 0) AND (UST2SZ > 0)        ; Define User Stack 1 area
                         1319     NDATA           DGROUP  ?C_USERSTACK, ?C_USERSTACK1, ?C_USERSTACK2
                         1320     ENDIF
                         1321     IF (UST1SZ > 0) AND (UST2SZ = 0) 
                                  NDATA           DGROUP  ?C_USERSTACK, ?C_USERSTACK1
                                  ENDIF
                         1324     IF (UST1SZ = 0) AND (UST2SZ > 0) 
                                  NDATA           DGROUP  ?C_USERSTACK, ?C_USERSTACK2
                                  ENDIF
                         1327     IF (UST1SZ = 0) AND (UST2SZ = 0) 
                                  NDATA           DGROUP  ?C_USERSTACK
                                  ENDIF
                         1330     $ENDIF
                         1331     
                         1332     ?C_MAINREGISTERS        REGDEF  R0 - R15
                         1333     
--------                 1334     ?C_SYSSTACK     SECTION DATA PUBLIC 'IDATA'
                         1335     $IF NOT TINY
                         1336     SDATA           DGROUP  ?C_SYSSTACK
                         1337     $ENDIF
                         1338     _BOS:                                   ; bottom of system stack
00000000                 1339                     DS      SSTSZ           ; Size of User Stack
                         1340     _TOS:                                   ; top of system stack
--------                 1341     ?C_SYSSTACK     ENDS
                         1342     
                         1343     
                         1344     PUBLIC          ?C_SYSSTKBOT
                         1345     PUBLIC          ?C_SYSSTKTOP
                         1346     
 0000                    1347     ?C_SYSSTKBOT    EQU     _BOS
 0200                    1348     ?C_SYSSTKTOP    EQU     _TOS
                         1349     
                         1350                     SSKDEF  7               ; unlimited System stack size
                         1351     
--------                 1352     ?C_STARTUP_CODE SECTION CODE    'ICODE'
                         1353     
                         1354     
                         1355     ;------------------------------------------------------------------------------
                         1356     
                         1357     ; Special Function Register Addresses
 EE1E                    1358     ADDRSEL1  EQU    0EE1EH
 EE26                    1359     ADDRSEL2  EQU    0EE26H
 EE2E                    1360     ADDRSEL3  EQU    0EE2EH
 EE36                    1361     ADDRSEL4  EQU    0EE36H
A166 MACRO ASSEMBLER  START_V3                                                            08/07/2019 16:02:47 PAGE    22

 EE4E                    1362     ADDRSEL7  EQU    0EE4EH
 FE18                    1363     CPUCON1   DEFR   0FE18H
 FE1A                    1364     CPUCON2   DEFR   0FE1AH
 EE00                    1365     EBCMOD0   EQU    0EE00H
 EE02                    1366     EBCMOD1   EQU    0EE02H
 EE12                    1367     FCONCS0   EQU    0EE12H
 EE1A                    1368     FCONCS1   EQU    0EE1AH
 EE22                    1369     FCONCS2   EQU    0EE22H
 EE2A                    1370     FCONCS3   EQU    0EE2AH
 EE32                    1371     FCONCS4   EQU    0EE32H
 EE4A                    1372     FCONCS7   EQU    0EE4AH
 F1E0                    1373     RSTCON    EQU    0F1E0H
 FE12                    1374     SP        DEFR   0FE12H
 FF0C                    1375     SPSEG     DEFR   0FF0CH
 FE14                    1376     STKOV     DEFR   0FE14H
 FE16                    1377     STKUN     DEFR   0FE16H
 FF4A                    1378     SYSCON0   DEFR   0FF4AH
 EE10                    1379     TCONCS0   EQU    0EE10H
 EE18                    1380     TCONCS1   EQU    0EE18H
 EE20                    1381     TCONCS2   EQU    0EE20H
 EE28                    1382     TCONCS3   EQU    0EE28H
 EE30                    1383     TCONCS4   EQU    0EE30H
 EE48                    1384     TCONCS7   EQU    0EE48H
 F0C8                    1385     WDTREL    DEFR   0F0C8H
 F0C6                    1386     WDTCS     DEFR   0F0C6H
 F1AE                    1387     WUOSCCON  DEFR   0F1AEH
 F1B4                    1388     HPOSCCON  DEFR   0F1B4H
 F1B6                    1389     PLLOSCCON DEFR   0F1B6H
 F0BC                    1390     PLLSTAT   DEFR   0F0BCH
 F1B8                    1391     PLLCON0   DEFR   0F1B8H
 F1BA                    1392     PLLCON1   DEFR   0F1BAH
 F1BC                    1393     PLLCON2   DEFR   0F1BCH
 F1BE                    1394     PLLCON3   DEFR   0F1BEH
 00FFFF00                1395     IMBCTRL   EQU    0FFFF00H
 00FFFF02                1396     IMBCTRH   EQU    0FFFF02H
 F100                    1397     ESRCFG0   DEFR   0F100H
 F102                    1398     ESRCFG1   DEFR   0F102H
 F104                    1399     ESRCFG2   DEFR   0F104H
 F0E2                    1400     STATCLR1  DEFR   0F0E2H
 F1B8.15                 1401     PLLCON0_NACK   BIT PLLCON0.15
 F1BA.15                 1402     PLLCON1_PACK   BIT PLLCON1.15
 F1BC.15                 1403     PLLCON2_K1ACK  BIT PLLCON2.15
 F1BE.15                 1404     PLLCON3_K2ACK  BIT PLLCON3.15
                         1405     
                         1406     ; Macro for calculation of ADDRSEL values -------------
                         1407     
                         1408     CALC_ADDRSEL     MACRO   sym, adr, size
                         1409     IF     size <= (4*KB)
                         1410     sym             EQU     ((adr >> 8) AND 0xFFF0) OR 0
                         1411     ELSEIF size <= (8*KB)
                         1412     sym             EQU     ((adr >> 8) AND 0xFFE0) OR 1
                         1413     ELSEIF size <= (16*KB)
                         1414     sym             EQU     ((adr >> 8) AND 0xFFC0) OR 2
                         1415     ELSEIF size <= (32*KB)
                         1416     sym             EQU     ((adr >> 8) AND 0xFF80) OR 3
                         1417     ELSEIF size <= (64*KB)
                         1418     sym             EQU     ((adr >> 8) AND 0xFF00) OR 4
                         1419     ELSEIF size <= (128*KB)
                         1420     sym             EQU     ((adr >> 8) AND 0xFE00) OR 5
                         1421     ELSEIF size <= (256*KB)
                         1422     sym             EQU     ((adr >> 8) AND 0xFC00) OR 6
                         1423     ELSEIF size <= (512*KB)
                         1424     sym             EQU     ((adr >> 8) AND 0xF800) OR 7
                         1425     ELSEIF size <= (1*MB)
                         1426     sym             EQU     ((adr >> 8) AND 0xF000) OR 8
                         1427     ELSEIF size <= (2*MB)
A166 MACRO ASSEMBLER  START_V3                                                            08/07/2019 16:02:47 PAGE    23

                         1428     sym             EQU     ((adr >> 8) AND 0xE000) OR 9
                         1429     ELSEIF size <= (4*MB)
                         1430     sym             EQU     ((adr >> 8) AND 0xC000) OR 10
                         1431     ELSEIF size <= (8*MB)
                         1432     sym             EQU     ((adr >> 8) AND 0x8000) OR 11
                         1433     ENDIF
                         1434                     ENDM
                         1435     ; -----------------------------------------------------
                         1436     
                         1437     ?C_RESET        PROC TASK C_STARTUP INTNO RESET = 0
                         1438     ?C_STARTUP:     LABEL   NEAR
                         1439     
                         1440     $IF (WATCHDOG = 0)
00000000 A55AA5A5        1441                     DISWDT                  ; Disable watchdog timer
                                  $ELSE 
                                                  EXTR    #1
                                                  MOV     WDTREL,#_WDTREL ; Set WDTREL register
                                  _WDTCS          SET     (_IR<<8)
                                                  EXTR    #1
                                                  MOV     WDTCS,#_WDTCS   ; Set WDTCON register
                                                  SRVWDT                  ; Enable watchdog
                         1449     $ENDIF
                         1450     
00000004 E60B???? R      1451                     MOV     STKUN,#SOF (_TOS)       ; INITIALIZE STACK UNFL REGISTER
00000008 E60A???? R      1452                     MOV     STKOV,#SOF (_BOS+6*2)   ; INITIALIZE STACK OVFL REGISTER
0000000C E609???? R      1453                     MOV     SP,#SOF (_TOS)          ; INITIALIZE STACK POINTER
00000010 E686???? R      1454                     MOV     SPSEG,#SEG (_TOS)       ; INITIALIZE STACK POINTER SEGMENT
                         1455     
                                  $IF (INIT_CPUCON1 = 1)                  ; Set CPUCON1 register
                                  _CPC1           SET     (_VECSC<<5) OR (_WDTCTL<<4) OR (_SGTDIS<<3) 
                                  _CPC1           SET     _CPC1 OR (_INTSCXT<<2) OR (_BP<<1) OR (_ZCJ)
                                                  MOV     CPUCON1,#_CPC1
                         1460     $ENDIF
                         1461     
                                  $IF (INIT_CPUCON2 = 1)                  ; Set CPUCON2 register
                                  _CPC2           SET     (_RETST<<3) OR (_DAID<<1) OR (_SL)
                                  _CPC2           SET     _CPC2 OR (_EIOIAEN<<7) OR (_STEN<<6) OR (_LFIC<<5) OR (_OVRUN<
                                  <4)
                                  _CPC2           SET     _CPC2 OR (_BYPPF<<9) OR (_BYPF<<8) 
                                  _CPC2           SET     _CPC2 OR (_FIFODEPTH<<12) OR (_FIFOFED<<10) 
                                                  MOV     CPUCON2,#_CPC2
                         1468     $ENDIF
                         1469     
                                  $IF (INIT_IMBCTR = 1)                   ; Set IMBCTR register
                                  _IMBCTRL        EQU     (_DDF<<14) OR (_DCF<<12) OR (_DLCPF<<3) OR (_WSFLASH)
                                                  MOV     R0,#_IMBCTRL
                                                  EXTS    #SEG(IMBCTRL),#01H
                                                  MOV     SOF(IMBCTRL),R0
                                  
                                  _IMBCTRH        EQU     (_PSPROT<<84)
                                                  MOV     R0,#_IMBCTRH
                                                  EXTS    #SEG(IMBCTRH),#01H
                                                  MOV     SOF(IMBCTRH),R0
                         1480     $ENDIF
                         1481     
                                  $IF (INIT_SYSCON0 = 1)                  ; Set SYSCON0 register
                                  _SYSCON0        SET     (_EMCLKSELEN<<6) OR (_EMCLKSEL<<3) OR (_CLKSEL)
                                                  MOV     SYSCON0,#_SYSCON0
                         1485     $ENDIF
                         1486     
                         1487     
                                  $IF (CONFIG_EBC = 1)                    ; Set EBCMOD0 register
                                  _EBC0           SET     (_SLAVE<<9) OR (_ARBEN<<8) OR (_CSPEN<<4) OR (_SAPEN)
                                  _EBC0           SET     _EBC0 OR (_BYTDIS<<12) OR (_WRCFG<<11)  OR (_EBCDIS<<10) 
                                  _EBC0           SET     _EBC0 OR (_RDYPOL<<15) OR (_RDYDIS<<14) OR (_ALEDIS<<13)
                                                  MOV     R0,#_EBC0
A166 MACRO ASSEMBLER  START_V3                                                            08/07/2019 16:02:47 PAGE    24

                                                  MOV     EBCMOD0,R0
                                  
                                                                          ; Set EBCMOD1 register
                                  _EBC1           SET     (_DHPDIS<<6) OR (_ALPDIS<<5) OR (_A0PDIS<<4) OR (_APDIS)
                                  _EBC1           SET     _EBC1 OR (_WRPDIS<<7)
                                                  MOV     R0,#_EBC1
                                                  MOV     EBCMOD1,R0
                         1500     $ENDIF
                         1501     
                                  $IF (CONFIG_CS0)  
                                                                          ; Set TCONCS0 register
                                  _TCS0           SET     (_PHD0<<5) OR (_PHC0<<3) OR (_PHB0<<2) OR (_PHA0)
                                  _TCS0           SET     _TCS0 OR (_WRPHF0<<13) OR (_RDPHF0<<11) OR (_PHE0<<6)
                                                  MOV     R0,#_TCS0
                                                  MOV     TCONCS0,R0
                                                                          ; Set FCONCS0 register
                                  _FCS0  SET  (_BTYP0<<4) OR (_RDYMOD0<<2) OR (_RDYEN0<<1) OR (_ENCS0)
                                                  MOV     R0,#_FCS0
                                                  MOV     FCONCS0,R0
                         1512     $ENDIF
                         1513     
                                  $IF (CONFIG_CS1)  
                                                                          ; Set TCONCS1 register
                                  _TCS1           SET     (_PHD1<<5) OR (_PHC1<<3) OR (_PHB1<<2) OR (_PHA1)
                                  _TCS1           SET     _TCS1 OR (_WRPHF1<<13) OR (_RDPHF1<<11) OR (_PHE1<<6)
                                                  MOV     R0,#_TCS1
                                                  MOV     TCONCS1,R0
                                                                          ; Set ADDRSEL1 register
                                  CALC_ADDRSEL    _ADDRSEL1, _ADDR1, _SIZE1
                                                  MOV     R0,#_ADDRSEL1
                                                  MOV     ADDRSEL1,R0
                                                                          ; Set FCONCS1 register
                                  _FCS1  SET  (_BTYP1<<4) OR (_RDYMOD1<<2) OR (_RDYEN1<<1) OR (_ENCS1)
                                                  MOV     R0,#_FCS1
                                                  MOV     FCONCS1,R0
                                  
                         1529     $ENDIF
                         1530     
                                  $IF (CONFIG_CS2)  
                                                                          ; Set TCONCS2 register
                                  _TCS2           SET     (_PHD2<<5) OR (_PHC2<<3) OR (_PHB2<<2) OR (_PHA2)
                                  _TCS2           SET     _TCS2 OR (_WRPHF2<<13) OR (_RDPHF2<<11) OR (_PHE2<<6)
                                                  MOV     R0,#_TCS2
                                                  MOV     TCONCS2,R0
                                                                          ; Set ADDRSEL2 register
                                  CALC_ADDRSEL    _ADDRSEL2, _ADDR2, _SIZE2
                                                  MOV     R0,#_ADDRSEL2
                                                  MOV     ADDRSEL2,R0
                                                                          ; Set FCONCS2 register
                                  _FCS2  SET  (_BTYP2<<4) OR (_RDYMOD2<<2) OR (_RDYEN2<<1) OR (_ENCS2)
                                                  MOV     R0,#_FCS2
                                                  MOV     FCONCS2,R0
                                  
                         1546     $ENDIF
                         1547     
                                  $IF (CONFIG_CS3)  
                                                                          ; Set TCONCS3 register
                                  _TCS3           SET     (_PHD3<<5) OR (_PHC3<<3) OR (_PHB3<<2) OR (_PHA3)
                                  _TCS3           SET     _TCS3 OR (_WRPHF3<<13) OR (_RDPHF3<<11) OR (_PHE3<<6)
                                                  MOV     R0,#_TCS3
                                                  MOV     TCONCS3,R0
                                                                          ; Set ADDRSEL3 register
                                  CALC_ADDRSEL    _ADDRSEL3, _ADDR3, _SIZE3
                                                  MOV     R0,#_ADDRSEL3
                                                  MOV     ADDRSEL3,R0
                                                                          ; Set FCONCS3 register
A166 MACRO ASSEMBLER  START_V3                                                            08/07/2019 16:02:47 PAGE    25

                                  _FCS3  SET  (_BTYP3<<4) OR (_RDYMOD3<<2) OR (_RDYEN3<<1) OR (_ENCS3)
                                                  MOV     R0,#_FCS3
                                                  MOV     FCONCS3,R0
                                  
                         1563     $ENDIF
                         1564     
                                  $IF (CONFIG_CS4)  
                                                                          ; Set TCONCS4 register
                                  _TCS4           SET     (_PHD4<<5) OR (_PHC4<<3) OR (_PHB4<<2) OR (_PHA4)
                                  _TCS4           SET     _TCS4 OR (_WRPHF4<<13) OR (_RDPHF4<<11) OR (_PHE4<<6)
                                                  MOV     R0,#_TCS4
                                                  MOV     TCONCS4,R0
                                                                          ; Set ADDRSEL4 register
                                  CALC_ADDRSEL    _ADDRSEL4, _ADDR4, _SIZE4
                                                  MOV     R0,#_ADDRSEL4
                                                  MOV     ADDRSEL4,R0
                                                                          ; Set FCONCS4 register
                                  _FCS4  SET  (_BTYP4<<4) OR (_RDYMOD4<<2) OR (_RDYEN4<<1) OR (_ENCS4)
                                                  MOV     R0,#_FCS4
                                                  MOV     FCONCS4,R0
                                  
                         1580     $ENDIF
                         1581     
                                  $IF (CONFIG_CS7)  
                                                                          ; Set TCONCS7 register
                                  _TCS7           SET     (_PHD7<<5) OR (_PHC7<<3) OR (_PHB7<<2) OR (_PHA7)
                                  _TCS7           SET     _TCS7 OR (_WRPHF7<<13) OR (_RDPHF7<<11) OR (_PHE7<<6)
                                                  MOV     R0,#_TCS7
                                                  MOV     TCONCS7,R0
                                                                          ; Set ADDRSEL7 register
                                  CALC_ADDRSEL    _ADDRSEL7, _ADDR7, _SIZE7
                                                  MOV     R0,#_ADDRSEL7
                                                  MOV     ADDRSEL7,R0
                                                                          ; Set FCONCS7 register
                                  _FCS7  SET  (_BTYP7<<4) OR (_RDYMOD7<<2) OR (_RDYEN7<<1) OR (_ENCS7)
                                                  MOV     R0,#_FCS7 
                                                  MOV     FCONCS7,R0
                                  
                         1597     $ENDIF
                         1598     
                                  $IF (INIT_RSTCON = 1)                   ; Set RSTCON register
                                  _RSTCON         SET     (_ROCOFF<<5) OR (_RORMV<<4) OR (_RSTLEN)
                                  _RSTCON         SET     _RSTCON OR (_RODIS<<7) OR (_ROCON<<6)
                                                  MOV     R0,#_RSTCON
                                                  MOV     RSTCON,R0
                         1604     $ENDIF
                         1605     
                                  $IF (INIT_WUOSCCON = 1)                 ; Set WUOSCCON register
                                  _WUOSCCON       SET     (_DIS<<4) OR (_PWSEL<<2) OR (_FREQSEL)
                                                  EXTR    #01H            ; Extended SFR access
                                                  MOV     WUOSCCON,#_WUOSCCON
                         1610     $ENDIF
                         1611     
                         1612     $IF (INIT_HPOSCCON = 1)                 ; Set HPOSCCON register
 0000                    1613     _HPOSCCON       SET     (_X1DEN<<7) OR (_MODE<<2) OR (_OSCWDTRST<<1)
 0000                    1614     _HPOSCCON       SET     _HPOSCCON OR (_HP_EMFINDISEN<<10) OR (_HP_EMCLKEN<<9) OR (_SHB
                                  Y<<8)
00000014 D180            1615                     EXTR    #01H            ; Extended SFR access
00000016 E6DA0000        1616                     MOV     HPOSCCON,#_HPOSCCON
                         1617     $IF (_MODE = 0)
0000001A CC00            1618                     NOP
                         1619     ; wait until OSC_HP frequency is usable
0000001C D180            1620     WHPO:           EXTR    #01H            ; Extended SFR access
0000001E F2F0B4F1        1621                     MOV     R0,HPOSCCON
00000022 9AF0FB00        1622                     JNB     R0.0,WHPO       ; check PLLV
00000026 D180            1623                     EXTR    #01H            ; Extended SFR access
A166 MACRO ASSEMBLER  START_V3                                                            08/07/2019 16:02:47 PAGE    26

00000028 E6710400        1624                     MOV     STATCLR1,#04H   ; Clear HPOSCCON.OSC2L1
0000002C CA00???? R      1625                     CALL    Delay1ms        ; delay of at least 1ms when CPU is clocked wi
                                  th max. 10 MHz
                         1626     
                                  $IF (MR_P = 1)                          ; new XC2xxxM/X/A devices have a flag which te
                                  lls if the HPosc is stable
                                                  EXTR    #01H            ; Extended SFR access
                                                  MOV     R0,#PLLSTAT
                                                  JNB     R0.15,WHPO      ; if PLLSTAT.OSCLOCK is not set -> retry to st
                                  art HPOsc
                         1631     $ENDIF ;$IF (MR_P = 1)
                         1632     
00000030 D180            1633                     EXTR    #01H            ; Extended SFR access
00000032 F2F0B4F1        1634                     MOV     R0,HPOSCCON
00000036 8AF0F1B0        1635                     JB      R0.11,WHPO      ; if HPOSCCON.OSC2L1 is set -> retry to start 
                                  HPOsc
                         1636     $ENDIF ;$IF (_MODE = 0)
                         1637     $ENDIF ;$IF (INIT_HPOSCCON = 1)
                         1638     
                                  $IF (INIT_PLLOSCCON = 1)                ; Set PLLOSCCON register
                                  _PLLOSCCON      SET     (_OSCPD)
                                                  EXTR    #01H            ; Extended SFR access
                                                  BFLDL   PLLOSCCON,#01H,#_PLLOSCCON 
                         1643     $ENDIF
                         1644     
                         1645     $IF (INIT_PLLCON = 1)                   ; Set PLLCON registers
                         1646     
                         1647     IF (NOT _VCOBY)                         ; if bypass mode is not selected
0000003A E000            1648                     MOV     R0,#00          ; make sure that the following PLL init code d
                                  oes not run too slow
                         1649     ELSE
                                                  MOV     R0,#_K1DIV      ; set K1 divider
                                  ENDIF ; IF (NOT _VCOBY)
0000003C CA00???? R      1652                     CALL    ApplyNewK1Div
                         1653     
                         1654     ; switch to bypass mode before changing the clock source or VCO parameter
00000040 D180            1655                     EXTR    #01H            ; Extended SFR access
00000042 76DC0100        1656                     OR      PLLCON0,#0001H  ; set bypass mode
00000046 CC00            1657                     NOP
00000048 D180            1658     WBY:            EXTR    #01H            ; Extended SFR access
0000004A F2F0BCF0        1659                     MOV     R0,PLLSTAT
0000004E 8AF0FB00        1660                     JB      R0.0,WBY        ; wait until bypass mode active
00000052 CC00            1661                     NOP
                         1662     
                         1663     IF (_VCOSEL)                            ; if VCOSEL should be set
00000054 D180            1664                     EXTR    #01H            ; Extended SFR access
00000056 76DC0400        1665                     OR      PLLCON0,#(_VCOSEL<<2) ; Set VCOSEL
0000005A CA00???? R      1666                     CALL    Delay200us      ; delay of at least 200us when CPU is clocked 
                                  with max. 5 MHz
                         1667     ENDIF
                         1668     
                         1669     ; select oscillator, set PDIV and enable P acknowledge
 0000                    1670     _PLLCON1        SET     (_PLL_EMCLKEN<<5) OR (_AOSCSEL<<3) OR (_OSCSEL<<1) OR (_PLLPWD
                                  )
 0000                    1671     _PLLCON1        SET     _PLLCON1 OR (_PDIV<<8) OR (_PLL_EMFINDISEN<<6)
0000005E E000            1672                     MOV     R0,#_PLLCON1
00000060 CA00???? R      1673                     CALL    ApplyNewPDiv
                         1674     
                         1675     ; keep VCO bypass, set VCOSEL, set NDIV and enable N acknowledge
 1305                    1676     _PLLCON0        SET     (_NDIV<<8) OR (_INSEL<<6) OR (_REGENSET<<5) OR (_REGENCLR<<4) 
                                  OR (_VCOSEL<<2) OR (_VCOPWD<<1) OR (1)
00000064 E6F00513        1677                     MOV     R0,#_PLLCON0
00000068 CA00???? R      1678                     CALL    ApplyNewNDiv
                         1679     
                         1680     ; set K2DIV so that fpll is not too different when disabling the bypass mode
 000F                    1681     _TMP_K2DIV      SET     15               ; K2DIV=15 will result in fvco < 10MHz
A166 MACRO ASSEMBLER  START_V3                                                            08/07/2019 16:02:47 PAGE    27

0000006C E0F0            1682                     MOV     R0,#_TMP_K2DIV
0000006E CA00???? R      1683                     CALL    ApplyNewK2Div
                         1684     
                         1685     
                         1686     IF (NOT _VCOBY)  ; if bypass mode is not selected, check VCO and leave bypass mode
                         1687     ; restart VCO lock detection
00000072 D180            1688                     EXTR    #01H            ; Extended SFR access
00000074 76DD0400        1689                     OR      PLLCON1,#0x0004 ; PLLCON1.RESLD = 1
                         1690     ; wait until VCO lock status is OK
00000078 D180            1691     WLOK:           EXTR    #01H            ; Extended SFR access
0000007A F2F0BCF0        1692                     MOV     R0,PLLSTAT
0000007E 9AF0FB30        1693                     JNB     R0.3,WLOK       ; wait until PLLSTAT.VCOLOCK is set
                         1694     
00000082 D180            1695                     EXTR    #01H            ; Extended SFR access
00000084 66DCFEFF        1696                     AND     PLLCON0,#0xFFFE ; VCOBY = 0
                         1697     ; wait until VCO bypass status is left
00000088 F2F0BCF0        1698     WNBY:           MOV     R0,PLLSTAT
0000008C 9AF0FC00        1699                     JNB     R0.0,WNBY
                         1700     
                         1701     ; set up right K1DIV here 
00000090 E010            1702                     MOV     R0,#_K1DIV
00000092 CA00???? R      1703                     CALL    ApplyNewK1Div
                         1704     
                         1705     ; approach final K2DIV in 3 steps
 0008                    1706     _TMP_K2DIV      SET     (_TMP_K2DIV + _K2DIV) / 2
00000096 E080            1707                     MOV     R0,#_TMP_K2DIV
00000098 CA00???? R      1708                     CALL    ApplyNewK2Div
 0004                    1709     _TMP_K2DIV      SET     (_TMP_K2DIV + _K2DIV) / 2
0000009C E040            1710                     MOV     R0,#_TMP_K2DIV
0000009E CA00???? R      1711                     CALL    ApplyNewK2Div
 0002                    1712     _TMP_K2DIV      SET     (_TMP_K2DIV + _K2DIV) / 2
000000A2 E020            1713                     MOV     R0,#_TMP_K2DIV
000000A4 CA00???? R      1714                     CALL    ApplyNewK2Div
                         1715     
                         1716     ENDIF ; IF (NOT _VCOBY)
                         1717     
                         1718     ; set final K2DIV
000000A8 E010            1719                     MOV     R0,#_K2DIV
000000AA CA00???? R      1720                     CALL    ApplyNewK2Div
                         1721     
                         1722     $ENDIF ;$IF (INIT_PLLCON = 1)
                         1723     
                         1724     
                                  $IF (INIT_ESRCFG = 1)                   ; Set ESRCFGx registers
                                                                          ; Set PC0 bit register
                                                  MOV     R0,#_ESR_PC0
                                                  MOV     ESRCFG0,R0              ; Set ESRCFG0 register
                                                  MOV     R0,#_ESR_PC1
                                                  MOV     ESRCFG1,R0              ; Set ESRCFG1 register
                                                  MOV     R0,#_ESR_PC2
                                                  MOV     ESRCFG2,R0              ; Set ESRCFG2 register
                         1733     $ENDIF ;$IF (INIT_ESRCFG = 1)
                         1734     
                         1735     $IF NOT TINY
                         1736     
                         1737                     EXTRN   ?C_PAGEDPP0 : DATA16
                         1738                     EXTRN   ?C_PAGEDPP1 : DATA16
                         1739                     EXTRN   ?C_PAGEDPP2 : DATA16
                         1740     
                         1741     $IF (DPPUSE = 1)
000000AE E600???? E      1742                     MOV     DPP0,#?C_PAGEDPP0       ; INIT DPP0 VALUE
                         1743     $ENDIF
000000B2 E601???? E      1744                     MOV     DPP1,#?C_PAGEDPP1       ; DEFAULT NEAR CONST PAGE
000000B6 E602???? E      1745                     MOV     DPP2,#?C_PAGEDPP2       ; DEFAULT NEAR DATA  PAGE
                         1746     
                         1747     $ENDIF
A166 MACRO ASSEMBLER  START_V3                                                            08/07/2019 16:02:47 PAGE    28

                         1748     
000000BA E608???? R      1749                     MOV     CP,#?C_MAINREGISTERS
                         1750     
000000BE B54AB5B5        1751                     EINIT
                         1752     
                         1753     
                         1754     IF UST1SZ > 0
000000C2 1A880203        1755                     BFLDH   PSW,#03H,#02H           ; select local bank 1
000000C6 E6F0???? R      1756                     MOV     R0,#?C_USERSTKTOP1
                         1757     ENDIF
                         1758     
                         1759     IF UST2SZ > 0
000000CA 1A880303        1760                     BFLDH   PSW,#03H,#03H           ; select local bank 2
000000CE E6F0???? R      1761                     MOV     R0,#?C_USERSTKTOP2
                         1762     ENDIF
                         1763     
                         1764     IF (UST1SZ > 0) OR (UST2SZ > 0)
000000D2 1A880003        1765                     BFLDH   PSW,#03H,#00H           ; select global bank
                         1766     ENDIF
                         1767     
000000D6 E6F0???? R      1768                     MOV     R0,#?C_USERSTKTOP
                         1769     
                         1770     ;------------------------------------------------------------------------------
                         1771     ;
                         1772     ; The following code is necessary to set RAM variables to 0 at start-up
                         1773     ; (RESET) of the C application program.
                         1774     ;
                         1775     
                         1776     $IF (CLR_MEMORY = 1)
                         1777     
                         1778                     EXTRN   ?C_CLRMEMSECSTART : WORD
                         1779     Clr_Memory:
                                  $IF TINY
                                                  MOV     R8,#?C_CLRMEMSECSTART
                                                  JMPR    cc_Z,EndClear
                                  
                                  RepeatClear:
                                  $IF (WATCHDOG = 1)
                                                  SRVWDT                          ; SERVICE WATCHDOG
                                  $ENDIF
                                                  MOV     R5,#0
                                                  MOV     R2,[R8+]    ; Count
                                                  JMPR    cc_Z,EndClear
                                                  MOV     R3,R2
                                                  MOV     R4,[R8+]
                                                  JBC     R2.14,ClearNear
                                  
                                  ClearBit:       MOV     R3,R4
                                                  SHR     R3,#3
                                                  BCLR    R3.0
                                                  ADD     R3,#0FD00H              ; START OF BIT SPACE
                                                  MOV     R5,#1
                                                  SHL     R5,R4
                                                  CPL     R5
                                                  AND     R5,[R3]
                                                  MOV     [R3],R5
                                                  ADD     R4,#1
                                                  SUB     R2,#1
                                                  JMPR    cc_NZ,ClearBit
                                                  JMPR    cc_UC,RepeatClear
                                  
                                  ClearNear:
                                  $IF (WATCHDOG = 1)
                                                  SRVWDT                          ; SERVICE WATCHDOG
                                  $ENDIF
                                                  MOVB    [R4],RL5
A166 MACRO ASSEMBLER  START_V3                                                            08/07/2019 16:02:47 PAGE    29

                                                  ADD     R4,#1
                                                  SUB     R2,#1
                                                  JMPR    cc_NN,ClearNear
                                                  JMPR    cc_UC,RepeatClear
                                  
                         1819     $ELSE
000000DA E6F9???? E      1820                     MOV     R9,#SEG (?C_CLRMEMSECSTART)
000000DE E6F8???? E      1821                     MOV     R8,#SOF (?C_CLRMEMSECSTART)
000000E2 F018            1822                     MOV     R1,R8           
000000E4 7019            1823                     OR      R1,R9
000000E6 2D29            1824                     JMPR    cc_Z,EndClear
                         1825     
                         1826     RepeatClear:
                                  $IF (WATCHDOG = 1)
                                                  SRVWDT                          ; SERVICE WATCHDOG
                         1829     $ENDIF
000000E8 E005            1830                     MOV     R5,#0
000000EA DC09            1831                     EXTS    R9,#1
000000EC 9828            1832                     MOV     R2,[R8+]    ; Count
000000EE 2D25            1833                     JMPR    cc_Z,EndClear
000000F0 F032            1834                     MOV     R3,R2
000000F2 DC09            1835                     EXTS    R9,#1
000000F4 9848            1836                     MOV     R4,[R8+]
000000F6 AAF21BE0        1837                     JBC     R2.14,ClearNear
000000FA AAF20EF0        1838                     JBC     R2.15,ClearFar
                         1839     
000000FE F034            1840     ClearBit:       MOV     R3,R4
00000100 7C33            1841                     SHR     R3,#3
00000102 0EF3            1842                     BCLR    R3.0
00000104 06F300FD        1843                     ADD     R3,#0FD00H              ; START OF BIT SPACE
00000108 E015            1844                     MOV     R5,#1
0000010A 4C54            1845                     SHL     R5,R4
0000010C 9150            1846                     CPL     R5
0000010E 685B            1847                     AND     R5,[R3]
00000110 B853            1848                     MOV     [R3],R5
00000112 0841            1849                     ADD     R4,#1
00000114 2821            1850                     SUB     R2,#1
00000116 3DF3            1851                     JMPR    cc_NZ,ClearBit
00000118 0DE7            1852                     JMPR    cc_UC,RepeatClear
                         1853     
0000011A DC09            1854     ClearFar:       EXTS    R9,#1
0000011C 9838            1855                     MOV     R3,[R8+]
                         1856     RepClearFar:
                                  $IF (WATCHDOG = 1)
                                                  SRVWDT                          ; SERVICE WATCHDOG
                         1859     $ENDIF
0000011E DC44            1860                     EXTP    R4,#1
00000120 B9A3            1861                     MOVB    [R3],RL5
00000122 0831            1862                     ADD     R3,#1
00000124 1840            1863                     ADDC    R4,#0
00000126 76F300C0        1864                     OR      R3,#0C000H
0000012A 2821            1865                     SUB     R2,#1
0000012C 7DF8            1866                     JMPR    cc_NN,RepClearFar
0000012E 0DDC            1867                     JMPR    cc_UC,RepeatClear
                         1868     
                         1869     ClearNear:
                                  $IF (WATCHDOG = 1)
                                                  SRVWDT                          ; SERVICE WATCHDOG
                         1872     $ENDIF
00000130 B9A4            1873                     MOVB    [R4],RL5
00000132 0841            1874                     ADD     R4,#1
00000134 2821            1875                     SUB     R2,#1
00000136 7DFC            1876                     JMPR    cc_NN,ClearNear
00000138 0DD7            1877                     JMPR    cc_UC,RepeatClear
                         1878     $ENDIF
                         1879     
A166 MACRO ASSEMBLER  START_V3                                                            08/07/2019 16:02:47 PAGE    30

                         1880     EndClear:
                         1881     
                         1882     $ENDIF
                         1883     
                         1884     ;------------------------------------------------------------------------------
                         1885     ;
                         1886     ;  The following code is necessary, if the application program contains
                         1887     ;  initialized variables at file level.
                         1888     ;
                         1889     
                         1890     $IF (INIT_VARS = 1) ; *********************************************************
                         1891     
                         1892                     EXTRN   ?C_INITSECSTART : WORD
                         1893     Init_Vars:
                                  $IF TINY ; ********************************************************************
                                                  MOV     R8,#?C_INITSECSTART
                                  RepeatInit:     
                                  $IF (WATCHDOG = 1)
                                                  SRVWDT                          ; SERVICE WATCHDOG
                                  $ENDIF
                                                  MOV     R2,[R8+]
                                                  JMPR    cc_Z,EndInit
                                                  JBC     R2.15,InitBit
                                                  MOV     R4,R2
                                                  AND     R2,#3FFFH
                                                  JMPR    cc_NZ,LenLoad
                                                  MOV     R4,#0
                                                  MOV     R2,[R8+]
                                  LenLoad:        MOV     R3,[R8+]
                                  CopyInitVal:    MOVB    [R3],[R8+]
                                  $IF (WATCHDOG = 1)
                                                  SRVWDT                          ; SERVICE WATCHDOG
                                  $ENDIF
                                                  ADD     R3,#1
                                                  SUB     R2,#1
                                                  JMPR    cc_NZ,CopyInitVal
                                                  JNB     R8.0,RepeatInit
                                                  ADD     R8,#1
                                                  ADDC    R9,#0                   ; potential overflow
                                                  JMPR    cc_UC,RepeatInit
                                  
                                  InitBit:        MOVBZ   R3,RL2
                                                  SHL     R3,#1
                                                  OR      R3,#0FD00H              ; START OF BIT SPACE
                                                  MOV     R4,#1
                                                  MOVB    RL5,RH2
                                                  SHL     R4,R5                   ; CALCULATE BIT MASK
                                                  JB      R2.7,SetBit
                                                  CPL     R4                      ; CLEAR BIT
                                                  AND     R4,[R3]
                                                  JMPR    cc_UC,StoreBit
                                  SetBit:         OR      R4,[R3]                 ; SET BIT
                                  StoreBit:       MOV     [R3],R4
                                                  JMPR    cc_UC,RepeatInit
                                  
                                  EndInit:
                                  
                         1937     $ELSE ; $IF TINY **************************************************************
0000013A E6F9???? E      1938                     MOV     R9,#SEG (?C_INITSECSTART)
0000013E E6F8???? E      1939                     MOV     R8,#SOF (?C_INITSECSTART)
                         1940     $IF (DPP3USE = 1) ; ***********************************************************
                         1941     RepeatInit:     
                                  $IF (WATCHDOG = 1)
                                                  SRVWDT                          ; SERVICE WATCHDOG
                         1944     $ENDIF
00000142 E6030300        1945                     MOV     DPP3,#3
A166 MACRO ASSEMBLER  START_V3                                                            08/07/2019 16:02:47 PAGE    31

00000146 DC09            1946                     EXTS    R9,#1
00000148 A828            1947                     MOV     R2,[R8]
0000014A 2D3D            1948                     JMPR    cc_Z,EndInit
0000014C 0882            1949                     ADD     R8,#2
0000014E 1890            1950                     ADDC    R9,#0
00000150 AAF22AF0        1951                     JBC     R2.15,InitBit
00000154 F042            1952                     MOV     R4,R2
00000156 66F2FF3F        1953                     AND     R2,#3FFFH
0000015A 3D05            1954                     JMPR    cc_NZ,LenLoad
0000015C E004            1955                     MOV     R4,#0
0000015E DC09            1956                     EXTS    R9,#1
00000160 A828            1957                     MOV     R2,[R8]
00000162 0882            1958                     ADD     R8,#2
00000164 1890            1959                     ADDC    R9,#0
00000166 DC09            1960     LenLoad:        EXTS    R9,#1
00000168 A838            1961                     MOV     R3,[R8]
0000016A 0882            1962                     ADD     R8,#2
0000016C 1890            1963                     ADDC    R9,#0
0000016E 8AF406E0        1964                     JB      R4.14,CopyInitVal
00000172 F6F306FE        1965                     MOV     DPP3,R3
00000176 DC09            1966                     EXTS    R9,#1
00000178 A838            1967                     MOV     R3,[R8]
0000017A 0882            1968                     ADD     R8,#2
0000017C 1890            1969                     ADDC    R9,#0
0000017E DC09            1970     CopyInitVal:    EXTS    R9,#1
00000180 A9A8            1971                     MOVB    RL5,[R8]
00000182 0881            1972                     ADD     R8,#1
00000184 1890            1973                     ADDC    R9,#0
00000186 B9A3            1974                     MOVB    [R3],RL5
00000188 0831            1975                     ADD     R3,#1
0000018A 8AF406E0        1976                     JB      R4.14,NoDPP3Adj
0000018E 8AF304E0        1977                     JB      R3.14,NoDPP3Adj
00000192 06030100        1978                     ADD     DPP3,#1
00000196 76F300C0        1979                     OR      R3,#0C000H              ; SET DPP3 Bits 
                         1980     NoDPP3Adj:      
                                  $IF (WATCHDOG = 1)
                                                  SRVWDT                          ; SERVICE WATCHDOG
                         1983     $ENDIF
0000019A 2821            1984                     SUB     R2,#1
0000019C 3DF0            1985                     JMPR    cc_NZ,CopyInitVal
0000019E 9AF8D000        1986                     JNB     R8.0,RepeatInit
000001A2 0881            1987                     ADD     R8,#1
000001A4 1890            1988                     ADDC    R9,#0                   ; potential overflow
000001A6 0DCD            1989                     JMPR    cc_UC,RepeatInit
                         1990     
000001A8 C043            1991     InitBit:        MOVBZ   R3,RL2
000001AA 5C13            1992                     SHL     R3,#1
000001AC 76F300FD        1993                     OR      R3,#0FD00H              ; START OF BIT SPACE
000001B0 E014            1994                     MOV     R4,#1
000001B2 F1A5            1995                     MOVB    RL5,RH2
000001B4 4C45            1996                     SHL     R4,R5                   ; CALCULATE BIT MASK
000001B6 8AF20370        1997                     JB      R2.7,SetBit
000001BA 9140            1998                     CPL     R4                      ; CLEAR BIT
000001BC 684B            1999                     AND     R4,[R3]
000001BE 0D01            2000                     JMPR    cc_UC,StoreBit
000001C0 784B            2001     SetBit:         OR      R4,[R3]                 ; SET BIT
000001C2 B843            2002     StoreBit:       MOV     [R3],R4
000001C4 0DBE            2003                     JMPR    cc_UC,RepeatInit
                         2004     
                                  $ELSE ; block IF (DPP3USE = 1) ************************************************
                                  RepeatInit:       
                                  $IF (WATCHDOG = 1)
                                                  SRVWDT                          ; SERVICE WATCHDOG
                                  $ENDIF
                                                  EXTS    R9,#1
                                                  MOV     R2,[R8]
A166 MACRO ASSEMBLER  START_V3                                                            08/07/2019 16:02:47 PAGE    32

                                                  JMPR    cc_Z,EndInit
                                                  ADD     R8,#2
                                                  ADDC    R9,#0
                                                  JBC     R2.15,InitBit
                                                  MOV     R4,R2
                                                  AND     R2,#3FFFH
                                                  JMPR    cc_NZ,LenLoad
                                                  MOV     R4,#0
                                                  EXTS    R9,#1
                                                  MOV     R2,[R8]
                                                  ADD     R8,#2
                                                  ADDC    R9,#0
                                  LenLoad:        EXTS    R9,#1
                                                  MOV     R3,[R8]
                                                  ADD     R8,#2
                                                  ADDC    R9,#0
                                                  JB      R4.14,CopyNearVal
                                                  MOV     R6,R3
                                                  EXTS    R9,#1
                                                  MOV     R3,[R8]
                                                  ADD     R8,#2
                                                  ADDC    R9,#0
                                  CopyInitVal:    EXTS    R9,#1
                                                  MOVB    RL5,[R8]
                                                  ADD     R8,#1
                                                  ADDC    R9,#0
                                                  EXTP    R6,#1
                                                  MOV     [R3],RL5
                                                  ADD     R3,#1
                                                  ADDC    R6,#0
                                  $IF (WATCHDOG = 1)
                                                  SRVWDT                          ; SERVICE WATCHDOG
                                  $ENDIF
                                                  SUB     R2,#1
                                                  JMPR    cc_NZ,CopyInitVal
                                                  JMPR    cc_UC,CopyInitDone
                                  
                                  
                                  CopyNearVal:    EXTS    R9,#1
                                                  MOVB    RL5,[R8]
                                                  ADD     R8,#1
                                                  ADDC    R9,#0
                                                  MOVB    [R3],RL5
                                                  ADD     R3,#1
                                  $IF (WATCHDOG = 1)
                                                  SRVWDT                          ; SERVICE WATCHDOG
                                  $ENDIF
                                                  SUB     R2,#1
                                                  JMPR    cc_NZ,CopyNearVal
                                  CopyInitDone:   JNB     R8.0,RepeatInit
                                                  ADD     R8,#1
                                                  ADDC    R9,#0                   ; potential overflow
                                                  JMPR    cc_UC,RepeatInit
                                  
                                  InitBit:        MOVBZ   R3,RL2
                                                  SHL     R3,#1
                                                  OR      R3,#0FD00H              ; START OF BIT SPACE
                                                  MOV     R4,#1
                                                  MOVB    RL5,RH2
                                                  SHL     R4,R5                   ; CALCULATE BIT MASK
                                                  JB      R2.7,SetBit
                                                  CPL     R4                      ; CLEAR BIT
                                                  AND     R4,[R3]
                                                  JMPR    cc_UC,StoreBit
                                  SetBit:         OR      R4,[R3]                 ; SET BIT
                                  StoreBit:       MOV     [R3],R4
A166 MACRO ASSEMBLER  START_V3                                                            08/07/2019 16:02:47 PAGE    33

                                                  JMPR    cc_UC,RepeatInit
                         2079     $ENDIF ; close block IF (DPP3USE = 1) **************************************** 
                         2080     
                         2081     EndInit:
                         2082     
                         2083     $ENDIF ; close block $IF TINY ************************************************ 
                         2084     
                         2085     $ENDIF ; close $IF (INIT_VARS = 1) ******************************************* 
                         2086     
                         2087     ;------------------------------------------------------------------------------
                         2088     
                                  $IF TINY
                                                  JMP     main
                         2091     $ELSE
000001C6 FA?????? E      2092                     JMP     FAR main
                         2093     $ENDIF
                         2094     ?C_RESET        ENDP
                         2095     
                         2096     ?C_UTILFUNCS    PROC    NEAR
                         2097     
000001CA E6F000F0        2098     Delay1ms:       MOV     R0,#0F000H      ; this is a delay of at least 1ms when CPU is 
                                  clocked with max. 10 MHz
000001CE A000            2099     Del1:           CMPD1   R0,#00000H
000001D0 3DFE            2100                     JMPR    CC_NE,Del1
000001D2 CB00            2101                     RET
                         2102     
000001D4 E6F00010        2103     Delay200us:     MOV     R0,#01000H      ; delay of at least 200us when CPU is clocked 
                                  with max. 5 MHz
000001D8 A000            2104     Del2:           CMPD1   R0,#00000H
000001DA 3DFE            2105                     JMPR    CC_NE,Del2
000001DC CB00            2106                     RET
                         2107     
000001DE F2F1BCF1        2108     ApplyNewK1Div:  MOV     R1,PLLCON2      ; new K1DIV value must be in R0
000001E2 66F1FF03        2109                     AND     R1,#03FFH       ; mask K1DIV
000001E6 4001            2110                     CMP     R0,R1           ; compare old and new value
000001E8 2D0C            2111                     JMPR    cc_EQ,K1DivDone ; do nothing if identical
                         2112     
000001EA F6F0BCF1        2113                     MOV     PLLCON2,R0      ; set new K1DIV value without setting K1ACK
                         2114     
000001EE F2F1BCF0        2115     K1CLRLoop:      MOV     R1,PLLSTAT      ; read PLLSTAT
000001F2 8AF1FC70        2116                     JB      R1.7,K1CLRLoop  ; wait until K1RDY is clear
                         2117                     
000001F6 D180            2118                     EXTR    #01H            ; Extended SFR access
000001F8 FFDE            2119                     BSET    PLLCON2_K1ACK   ; set K1ACK
000001FA F2F1BCF0        2120     K1SETLoop:      MOV     R1,PLLSTAT      ; read PLLSTAT
000001FE 9AF1FC70        2121                     JNB     R1.7,K1SETLoop  ; wait until K1RDY is set
                         2122     
00000202 CB00            2123     K1DivDone:      RET
                         2124     
                         2125     
00000204 F2F1BEF1        2126     ApplyNewK2Div:  MOV     R1,PLLCON3      ; new K2DIV value must be in R0
00000208 66F1FF03        2127                     AND     R1,#03FFH       ; mask K2DIV
0000020C 4001            2128                     CMP     R0,R1           ; compare old and new value
0000020E 2D0C            2129                     JMPR    cc_EQ,K2DivDone ; do nothing if identical
                         2130     
00000210 F6F0BEF1        2131                     MOV     PLLCON3,R0      ; set new K2DIV value without setting K2ACK
                         2132     
00000214 F2F1BCF0        2133     K2CLRLoop:      MOV     R1,PLLSTAT      ; read PLLSTAT
00000218 8AF1FC80        2134                     JB      R1.8,K2CLRLoop  ; wait until K2RDY is clear
                         2135                     
0000021C D180            2136                     EXTR    #01H            ; Extended SFR access
0000021E FFDF            2137                     BSET    PLLCON3_K2ACK   ; set K2ACK
                         2138     
00000220 F2F1BCF0        2139     K2SETLoop:      MOV     R1,PLLSTAT      ; read PLLSTAT
00000224 9AF1FC80        2140                     JNB     R1.8,K2SETLoop  ; wait until K2RDY is set
                         2141     
A166 MACRO ASSEMBLER  START_V3                                                            08/07/2019 16:02:47 PAGE    34

00000228 CB00            2142     K2DivDone:      RET
                         2143     
                         2144     
0000022A F2F1BAF1        2145     ApplyNewPDiv:   MOV     R1,PLLCON1      ; new PLLCON1 value must be in R0
0000022E 5010            2146                     XOR     R1,R0
00000230 66F1000F        2147                     AND     R1,#0F00H
00000234 4810            2148                     CMP     R1,#00          ; check if PDIV needs to be modified
00000236 3D03            2149                     JMPR    cc_NE,AppPDiv
00000238 F6F0BAF1        2150                     MOV     PLLCON1,R0      ; if PDIV is identical, just write PLLCON1
0000023C CB00            2151                     RET
                         2152     
0000023E D180            2153     AppPDiv:        EXTR    #01H            ; Extended SFR access
00000240 E6710300        2154                     MOV     STATCLR1,#0003H ; Clear PLLSTAT.VCOL0/VCOL1
00000244 F6F0BAF1        2155                     MOV     PLLCON1,R0      ; write PLLCON1 (without PACK)
00000248 F2F1BCF0        2156     PCLRLoop:       MOV     R1,PLLSTAT      ; read PLLSTAT
0000024C 8AF1FC50        2157                     JB      R1.5,PCLRLoop   ; wait until PRDY is clear
00000250 D180            2158                     EXTR    #01H            ; Extended SFR access
00000252 FFDD            2159                     BSET    PLLCON1_PACK    ; set PACK
00000254 F2F1BCF0        2160     PSETLoop:       MOV     R1,PLLSTAT      ; read PLLSTAT
00000258 9AF1FC50        2161                     JNB     R1.5,PSETLoop   ; wait until PRDY is set
0000025C CB00            2162                     RET
                         2163     
                         2164     
0000025E F2F1B8F1        2165     ApplyNewNDiv:   MOV     R1,PLLCON0      ; new PLLCON0 value must be in R0
00000262 5010            2166                     XOR     R1,R0
00000264 66F1003F        2167                     AND     R1,#3F00H
00000268 4810            2168                     CMP     R1,#00          ; check if NDIV needs to be modified
0000026A 3D03            2169                     JMPR    cc_NE,AppNDiv
0000026C F6F0B8F1        2170                     MOV     PLLCON0,R0      ; if NDIV is identical, just write PLLCON0
00000270 CB00            2171                     RET
                         2172     
00000272 D180            2173     AppNDiv:        EXTR    #01H            ; Extended SFR access
00000274 E6710300        2174                     MOV     STATCLR1,#03H   ; Clear PLLSTAT.VCOL0/VCOL1
00000278 F6F0B8F1        2175                     MOV     PLLCON0,R0      ; write PLLCON0 (without NACK)
0000027C F2F1BCF0        2176     NCLRLoop:       MOV     R1,PLLSTAT      ; read PLLSTAT
00000280 8AF1FC60        2177                     JB      R1.6,NCLRLoop   ; wait until NRDY is clear
00000284 D180            2178                     EXTR    #01H            ; Extended SFR access
00000286 FFDC            2179                     BSET    PLLCON0_NACK    ; set NACK
00000288 F2F1BCF0        2180     NSETLoop:       MOV     R1,PLLSTAT      ; read PLLSTAT
0000028C 9AF1FC60        2181                     JNB     R1.6,NSETLoop   ; wait until NRDY is set
00000290 CB00            2182                     RET
                         2183     
                         2184     
                         2185     ?C_UTILFUNCS    ENDP
                         2186     
--------                 2187     ?C_STARTUP_CODE ENDS
                         2188     
                         2189     $IF (INIT_VARS = 1)
                         2190     EXTERN  ?C_ENDINIT:WORD
                         2191     $ENDIF
                         2192     
                         2193                     END
                         2194     
                         2195     
                         2196     
A166 MACRO ASSEMBLER  START_V3                                                            08/07/2019 16:02:47 PAGE    35

SYMBOL TABLE LISTING
------ ----- -------


N A M E             TYPE   VALUE             I  ATTRIBUTES

?C_CLRMEMSECSTART.  WORD   ----                 EXT 
?C_ENDINIT . . . .  WORD   ----                 EXT 
?C_INITSECSTART. .  WORD   ----                 EXT 
?C_MAINREGISTERS .  RBANK                       REGBANK
?C_PAGEDPP0. . . .  DATA16 ----                 EXT 
?C_PAGEDPP1. . . .  DATA16 ----                 EXT 
?C_PAGEDPP2. . . .  DATA16 ----                 EXT 
?C_RESET . . . . .  I-FAR  0H                R  SEC=?C_STARTUP_CODE
?C_STARTUP . . . .  NEAR   0H                R  PUB SEC=?C_STARTUP_CODE
?C_STARTUP_CODE. .  ----   ----              R  SECTION
?C_SYSSTACK. . . .  ----   ----              R  SECTION
?C_SYSSTKBOT . . .  BYTE   0H                R  PUB SEC=?C_SYSSTACK
?C_SYSSTKTOP . . .  BYTE   200H              R  PUB SEC=?C_SYSSTACK
?C_USERSTACK . . .  ----   ----              R  SECTION
?C_USERSTACK1. . .  ----   ----              R  SECTION
?C_USERSTACK2. . .  ----   ----              R  SECTION
?C_USERSTKTOP. . .  BYTE   200H              R  SEC=?C_USERSTACK
?C_USERSTKTOP1 . .  BYTE   20H               R  SEC=?C_USERSTACK1
?C_USERSTKTOP2 . .  BYTE   20H               R  SEC=?C_USERSTACK2
?C_USRSTKBOT . . .  BYTE   0H                R  PUB SEC=?C_USERSTACK
?C_USRSTKBOT1. . .  BYTE   0H                R  SEC=?C_USERSTACK1
?C_USRSTKBOT2. . .  BYTE   0H                R  SEC=?C_USERSTACK2
?C_UTILFUNCS . . .  NEAR   1CAH              R  SEC=?C_STARTUP_CODE
?L?VECSC . . . . .  DATA3  0H                A  PUB 
ADDRSEL1 . . . . .  DATA16 EE1EH             A  
ADDRSEL2 . . . . .  DATA16 EE26H             A  
ADDRSEL3 . . . . .  DATA16 EE2EH             A  
ADDRSEL4 . . . . .  DATA16 EE36H             A  
ADDRSEL7 . . . . .  DATA16 EE4EH             A  
AppNDiv. . . . . .  NEAR   272H              R  SEC=?C_STARTUP_CODE
AppPDiv. . . . . .  NEAR   23EH              R  SEC=?C_STARTUP_CODE
ApplyNewK1Div. . .  NEAR   1DEH              R  SEC=?C_STARTUP_CODE
ApplyNewK2Div. . .  NEAR   204H              R  SEC=?C_STARTUP_CODE
ApplyNewNDiv . . .  NEAR   25EH              R  SEC=?C_STARTUP_CODE
ApplyNewPDiv . . .  NEAR   22AH              R  SEC=?C_STARTUP_CODE
CP . . . . . . . .  WORD   FE10H             A  SFR
CPUCON1. . . . . .  WORD   FE18H             A  SFR
CPUCON2. . . . . .  WORD   FE1AH             A  SFR
C_STARTUP. . . . .  ----   ----                 
ClearBit . . . . .  NEAR   FEH               R  SEC=?C_STARTUP_CODE
ClearFar . . . . .  NEAR   11AH              R  SEC=?C_STARTUP_CODE
ClearNear. . . . .  NEAR   130H              R  SEC=?C_STARTUP_CODE
Clr_Memory . . . .  NEAR   DAH               R  SEC=?C_STARTUP_CODE
CopyInitVal. . . .  NEAR   17EH              R  SEC=?C_STARTUP_CODE
DPP0 . . . . . . .  WORD   FE00H             A  SFR
DPP1 . . . . . . .  WORD   FE02H             A  SFR
DPP2 . . . . . . .  WORD   FE04H             A  SFR
DPP3 . . . . . . .  WORD   FE06H             A  SFR
Del1 . . . . . . .  NEAR   1CEH              R  SEC=?C_STARTUP_CODE
Del2 . . . . . . .  NEAR   1D8H              R  SEC=?C_STARTUP_CODE
Delay1ms . . . . .  NEAR   1CAH              R  SEC=?C_STARTUP_CODE
Delay200us . . . .  NEAR   1D4H              R  SEC=?C_STARTUP_CODE
EBCMOD0. . . . . .  DATA16 EE00H             A  
EBCMOD1. . . . . .  DATA16 EE02H             A  
ESRCFG0. . . . . .  WORD   F100H             A  ESFR
ESRCFG1. . . . . .  WORD   F102H             A  ESFR
ESRCFG2. . . . . .  WORD   F104H             A  ESFR
EndClear . . . . .  NEAR   13AH              R  SEC=?C_STARTUP_CODE
EndInit. . . . . .  NEAR   1C6H              R  SEC=?C_STARTUP_CODE
FCONCS0. . . . . .  DATA16 EE12H             A  
A166 MACRO ASSEMBLER  START_V3                                                            08/07/2019 16:02:47 PAGE    36

FCONCS1. . . . . .  DATA16 EE1AH             A  
FCONCS2. . . . . .  DATA16 EE22H             A  
FCONCS3. . . . . .  DATA16 EE2AH             A  
FCONCS4. . . . . .  DATA16 EE32H             A  
FCONCS7. . . . . .  DATA16 EE4AH             A  
HPOSCCON . . . . .  WORD   F1B4H             A  ESFR
IMBCTRH. . . . . .  DATA32 FFFF02H           A  
IMBCTRL. . . . . .  DATA32 FFFF00H           A  
InitBit. . . . . .  NEAR   1A8H              R  SEC=?C_STARTUP_CODE
Init_Vars. . . . .  NEAR   13AH              R  SEC=?C_STARTUP_CODE
K1CLRLoop. . . . .  NEAR   1EEH              R  SEC=?C_STARTUP_CODE
K1DivDone. . . . .  NEAR   202H              R  SEC=?C_STARTUP_CODE
K1SETLoop. . . . .  NEAR   1FAH              R  SEC=?C_STARTUP_CODE
K2CLRLoop. . . . .  NEAR   214H              R  SEC=?C_STARTUP_CODE
K2DivDone. . . . .  NEAR   228H              R  SEC=?C_STARTUP_CODE
K2SETLoop. . . . .  NEAR   220H              R  SEC=?C_STARTUP_CODE
KB . . . . . . . .  DATA16 400H              A  
LenLoad. . . . . .  NEAR   166H              R  SEC=?C_STARTUP_CODE
MB . . . . . . . .  DATA32 100000H           A  
Model. . . . . . .  LIT    "NEAR"               
NCLRLoop . . . . .  NEAR   27CH              R  SEC=?C_STARTUP_CODE
NDATA. . . . . . .  ----   ----                 GROUP
NSETLoop . . . . .  NEAR   288H              R  SEC=?C_STARTUP_CODE
NoDPP3Adj. . . . .  NEAR   19AH              R  SEC=?C_STARTUP_CODE
PCLRLoop . . . . .  NEAR   248H              R  SEC=?C_STARTUP_CODE
PLLCON0. . . . . .  WORD   F1B8H             A  ESFR
PLLCON0_NACK . . .  BIT    F1B8H.15          A  
PLLCON1. . . . . .  WORD   F1BAH             A  ESFR
PLLCON1_PACK . . .  BIT    F1BAH.15          A  
PLLCON2. . . . . .  WORD   F1BCH             A  ESFR
PLLCON2_K1ACK. . .  BIT    F1BCH.15          A  
PLLCON3. . . . . .  WORD   F1BEH             A  ESFR
PLLCON3_K2ACK. . .  BIT    F1BEH.15          A  
PLLOSCCON. . . . .  WORD   F1B6H             A  ESFR
PLLSTAT. . . . . .  WORD   F0BCH             A  ESFR
PSETLoop . . . . .  NEAR   254H              R  SEC=?C_STARTUP_CODE
PSW. . . . . . . .  WORD   FF10H             A  SFR
RESET. . . . . . .  INTNO  0000H             A  GLB 
RSTCON . . . . . .  DATA16 F1E0H             A  
RepClearFar. . . .  NEAR   11EH              R  SEC=?C_STARTUP_CODE
RepeatClear. . . .  NEAR   E8H               R  SEC=?C_STARTUP_CODE
RepeatInit . . . .  NEAR   142H              R  SEC=?C_STARTUP_CODE
SDATA. . . . . . .  ----   ----                 GROUP
SP . . . . . . . .  WORD   FE12H             A  SFR
SPSEG. . . . . . .  WORD   FF0CH             A  SFR
SSTSZ. . . . . . .  DATA16 200H              A  
STATCLR1 . . . . .  WORD   F0E2H             A  ESFR
STKOV. . . . . . .  WORD   FE14H             A  SFR
STKUN. . . . . . .  WORD   FE16H             A  SFR
SYSCON0. . . . . .  WORD   FF4AH             A  SFR
SetBit . . . . . .  NEAR   1C0H              R  SEC=?C_STARTUP_CODE
StoreBit . . . . .  NEAR   1C2H              R  SEC=?C_STARTUP_CODE
TCONCS0. . . . . .  DATA16 EE10H             A  
TCONCS1. . . . . .  DATA16 EE18H             A  
TCONCS2. . . . . .  DATA16 EE20H             A  
TCONCS3. . . . . .  DATA16 EE28H             A  
TCONCS4. . . . . .  DATA16 EE30H             A  
TCONCS7. . . . . .  DATA16 EE48H             A  
UST1SZ . . . . . .  DATA8  20H               A  
UST2SZ . . . . . .  DATA8  20H               A  
USTSZ. . . . . . .  DATA16 200H              A  
WBY. . . . . . . .  NEAR   48H               R  SEC=?C_STARTUP_CODE
WDTCS. . . . . . .  WORD   F0C6H             A  ESFR
WDTREL . . . . . .  WORD   F0C8H             A  ESFR
WHPO . . . . . . .  NEAR   1CH               R  SEC=?C_STARTUP_CODE
WLOK . . . . . . .  NEAR   78H               R  SEC=?C_STARTUP_CODE
A166 MACRO ASSEMBLER  START_V3                                                            08/07/2019 16:02:47 PAGE    37

WNBY . . . . . . .  NEAR   88H               R  SEC=?C_STARTUP_CODE
WUOSCCON . . . . .  WORD   F1AEH             A  ESFR
_A0PDIS. . . . . .  DATA3  0H                A  
_ADDR1 . . . . . .  DATA32 100000H           A  
_ADDR2 . . . . . .  DATA32 200000H           A  
_ADDR3 . . . . . .  DATA32 300000H           A  
_ADDR4 . . . . . .  DATA32 400000H           A  
_ADDR7 . . . . . .  DATA32 700000H           A  
_ALEDIS. . . . . .  DATA3  0H                A  
_ALPDIS. . . . . .  DATA3  0H                A  
_AOSCSEL . . . . .  DATA3  0H                A  
_APDIS . . . . . .  DATA3  0H                A  
_ARBEN . . . . . .  DATA3  0H                A  
_BOS . . . . . . .  BYTE   0H                R  SEC=?C_SYSSTACK
_BP. . . . . . . .  DATA3  1H                A  
_BTYP0 . . . . . .  DATA3  2H                A  
_BTYP1 . . . . . .  DATA3  2H                A  
_BTYP2 . . . . . .  DATA3  2H                A  
_BTYP3 . . . . . .  DATA3  2H                A  
_BTYP4 . . . . . .  DATA3  2H                A  
_BTYP7 . . . . . .  DATA3  2H                A  
_BYPF. . . . . . .  DATA3  1H                A  
_BYPPF . . . . . .  DATA3  1H                A  
_BYTDIS. . . . . .  DATA3  0H                A  
_CLKSEL. . . . . .  DATA3  2H                A  
_CSPEN . . . . . .  DATA4  8H                A  
_DAID. . . . . . .  DATA3  1H                A  
_DCF . . . . . . .  DATA3  1H                A  
_DDF . . . . . . .  DATA3  1H                A  
_DHPDIS. . . . . .  DATA3  0H                A  
_DIS . . . . . . .  DATA3  0H                A  
_DLCPF . . . . . .  DATA3  1H                A  
_EBCDIS. . . . . .  DATA3  0H                A  
_EIOIAEN . . . . .  DATA3  1H                A  
_EMCLKSEL. . . . .  DATA3  0H                A  
_EMCLKSELEN. . . .  DATA3  0H                A  
_ENCS0 . . . . . .  DATA3  1H                A  
_ENCS1 . . . . . .  DATA3  1H                A  
_ENCS2 . . . . . .  DATA3  1H                A  
_ENCS3 . . . . . .  DATA3  1H                A  
_ENCS4 . . . . . .  DATA3  1H                A  
_ENCS7 . . . . . .  DATA3  1H                A  
_ESR_PC0 . . . . .  DATA4  EH                A  
_ESR_PC1 . . . . .  DATA3  2H                A  
_ESR_PC2 . . . . .  DATA3  2H                A  
_FIFODEPTH . . . .  DATA4  8H                A  
_FIFOFED . . . . .  DATA3  3H                A  
_FREQSEL . . . . .  DATA3  0H                A  
_HPOSCCON. . . . .  DATA3  0H                A  
_HP_EMCLKEN. . . .  DATA3  0H                A  
_HP_EMFINDISEN . .  DATA3  0H                A  
_INSEL . . . . . .  DATA3  0H                A  
_INTSCXT . . . . .  DATA3  1H                A  
_IR. . . . . . . .  DATA3  0H                A  
_K1DIV . . . . . .  DATA3  1H                A  
_K2DIV . . . . . .  DATA3  1H                A  
_LFIC. . . . . . .  DATA3  1H                A  
_MODE. . . . . . .  DATA3  0H                A  
_NDIV. . . . . . .  DATA8  13H               A  
_OSCPD . . . . . .  DATA3  0H                A  
_OSCSEL. . . . . .  DATA3  0H                A  
_OSCWDTRST . . . .  DATA3  0H                A  
_OVRUN . . . . . .  DATA3  1H                A  
_PDIV. . . . . . .  DATA3  0H                A  
_PHA0. . . . . . .  DATA3  0H                A  
_PHA1. . . . . . .  DATA3  0H                A  
A166 MACRO ASSEMBLER  START_V3                                                            08/07/2019 16:02:47 PAGE    38

_PHA2. . . . . . .  DATA3  0H                A  
_PHA3. . . . . . .  DATA3  0H                A  
_PHA4. . . . . . .  DATA3  0H                A  
_PHA7. . . . . . .  DATA3  0H                A  
_PHB0. . . . . . .  DATA3  0H                A  
_PHB1. . . . . . .  DATA3  0H                A  
_PHB2. . . . . . .  DATA3  0H                A  
_PHB3. . . . . . .  DATA3  0H                A  
_PHB4. . . . . . .  DATA3  0H                A  
_PHB7. . . . . . .  DATA3  0H                A  
_PHC0. . . . . . .  DATA3  0H                A  
_PHC1. . . . . . .  DATA3  0H                A  
_PHC2. . . . . . .  DATA3  0H                A  
_PHC3. . . . . . .  DATA3  0H                A  
_PHC4. . . . . . .  DATA3  0H                A  
_PHC7. . . . . . .  DATA3  0H                A  
_PHD0. . . . . . .  DATA3  0H                A  
_PHD1. . . . . . .  DATA3  0H                A  
_PHD2. . . . . . .  DATA3  0H                A  
_PHD3. . . . . . .  DATA3  0H                A  
_PHD4. . . . . . .  DATA3  0H                A  
_PHD7. . . . . . .  DATA3  0H                A  
_PHE0. . . . . . .  DATA4  8H                A  
_PHE1. . . . . . .  DATA4  8H                A  
_PHE2. . . . . . .  DATA4  8H                A  
_PHE3. . . . . . .  DATA4  8H                A  
_PHE4. . . . . . .  DATA4  8H                A  
_PHE7. . . . . . .  DATA4  8H                A  
_PLLCON0 . . . . .  DATA16 1305H             A  
_PLLCON1 . . . . .  DATA3  0H                A  
_PLLPWD. . . . . .  DATA3  0H                A  
_PLL_EMCLKEN . . .  DATA3  0H                A  
_PLL_EMFINDISEN. .  DATA3  0H                A  
_PSPROT. . . . . .  DATA3  0H                A  
_PWSEL . . . . . .  DATA3  0H                A  
_RDPHF0. . . . . .  DATA3  0H                A  
_RDPHF1. . . . . .  DATA3  0H                A  
_RDPHF2. . . . . .  DATA3  0H                A  
_RDPHF3. . . . . .  DATA3  0H                A  
_RDPHF4. . . . . .  DATA3  0H                A  
_RDPHF7. . . . . .  DATA3  0H                A  
_RDYDIS. . . . . .  DATA3  0H                A  
_RDYEN0. . . . . .  DATA3  0H                A  
_RDYEN1. . . . . .  DATA3  0H                A  
_RDYEN2. . . . . .  DATA3  0H                A  
_RDYEN3. . . . . .  DATA3  0H                A  
_RDYEN4. . . . . .  DATA3  0H                A  
_RDYEN7. . . . . .  DATA3  0H                A  
_RDYMOD0 . . . . .  DATA3  0H                A  
_RDYMOD1 . . . . .  DATA3  0H                A  
_RDYMOD2 . . . . .  DATA3  0H                A  
_RDYMOD3 . . . . .  DATA3  0H                A  
_RDYMOD4 . . . . .  DATA3  0H                A  
_RDYMOD7 . . . . .  DATA3  0H                A  
_RDYPOL. . . . . .  DATA3  0H                A  
_REGENCLR. . . . .  DATA3  0H                A  
_REGENSET. . . . .  DATA3  0H                A  
_RETST . . . . . .  DATA3  1H                A  
_SAPEN . . . . . .  DATA3  0H                A  
_SGTDIS. . . . . .  DATA3  0H                A  
_SHBY. . . . . . .  DATA3  0H                A  
_SIZE1 . . . . . .  DATA32 100000H           A  
_SIZE2 . . . . . .  DATA32 100000H           A  
_SIZE3 . . . . . .  DATA32 100000H           A  
_SIZE4 . . . . . .  DATA32 100000H           A  
_SIZE7 . . . . . .  DATA32 100000H           A  
A166 MACRO ASSEMBLER  START_V3                                                            08/07/2019 16:02:47 PAGE    39

_SL. . . . . . . .  DATA3  1H                A  
_SLAVE . . . . . .  DATA3  0H                A  
_STEN. . . . . . .  DATA3  0H                A  
_TMP_K2DIV . . . .  DATA3  2H                A  
_TOS . . . . . . .  BYTE   200H              R  SEC=?C_SYSSTACK
_VCOBY . . . . . .  DATA3  0H                A  
_VCOPWD. . . . . .  DATA3  0H                A  
_VCOSEL. . . . . .  DATA3  1H                A  
_VECSC . . . . . .  DATA3  0H                A  
_WDTCTL. . . . . .  DATA3  0H                A  
_WDTREL. . . . . .  DATA3  0H                A  
_WRCFG . . . . . .  DATA3  0H                A  
_WRPDIS. . . . . .  DATA3  0H                A  
_WRPHF0. . . . . .  DATA3  3H                A  
_WRPHF1. . . . . .  DATA3  3H                A  
_WRPHF2. . . . . .  DATA3  3H                A  
_WRPHF3. . . . . .  DATA3  3H                A  
_WRPHF4. . . . . .  DATA3  3H                A  
_WRPHF7. . . . . .  DATA3  3H                A  
_WSFLASH . . . . .  DATA3  4H                A  
_X1DEN . . . . . .  DATA3  0H                A  
_ZCJ . . . . . . .  DATA3  1H                A  
main . . . . . . .  NEAR   ----                 EXT 



ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
